#!/usr/bin/env ruby

require 'fileutils'
require 'base64'
include FileUtils

lila_dir = pwd()
source_dir = lila_dir + '/public/piece/'
dest_dir = lila_dir + '/public/piece-css/'

chess_themes = [
  ['alpha', 'svg'],
  ['cburnett', 'svg'],
  ['merida', 'svg'],
  ['pirouetti', 'svg'],
  ['spatial', 'svg'],
  ['reillycraig', 'svg'],
  ['fantasy', 'svg'],
  ['shapes', 'svg'],
  ['companion', 'svg'],
  ['letter', 'svg'],
  ['leipzig', 'svg'],
  ['kosal', 'svg'],
  ['california', 'svg'],
  ['maestro', 'svg'],
  ['fresca', 'svg'],
  ['cardinal', 'svg'],
  ['gioco', 'svg'],
  ['tatiana', 'svg'],
  ['staunty', 'svg'],
  ['governor', 'svg'],
  ['libra', 'svg'],
  ['dubrovny', 'svg'],
]
draughts_themes = [
  ['wide_crown', 'svg'],
  ['fabirovsky','svg'],
  ['check_yb', 'png']
]
loa_themes = [
  ['wide', 'svg'],
  ['fabirovsky_loa', 'svg'],
  ['check_yb_loa','png']
]
shogi_themes = [
  ['2kanji', 'svg'],
  ['ctw', 'svg'],
  ['1kanji', 'svg']
]
xiangqi_themes = [
  ['2dhanzi', 'svg'],
  ['ka', 'svg']
]
flipello_themes = [
  ['classic_flipello', 'png'],
  ['check_yb_flipello', 'png'],
  ['marble_bw_flipello', 'png'],
  ['fabirovsky_flipello', 'svg']
]
mancala_themes =[
  ['red_mancala', 'svg'],
  ['green_mancala', 'svg'],
  ['blue_mancala', 'svg'],
  ['grey_mancala', 'svg'],
  ['green_numbers_mancala', 'svg'],
  ['green_seed_mancala', 'svg'],
]
types = {
  'svg' => 'svg+xml;base64,',
  'png' => 'png;base64,'
}
roles = ['p-piece', 'n-piece', 'b-piece', 'r-piece', 'q-piece', 'k-piece']
colors = ['w', 'b']
chess_variants = ['standard','chess960', 'fromPosition', 'kingOfTheHill', 'threeCheck', 'fiveCheck', 'antichess', 'atomic',
'horde', 'racingKings', 'crazyhouse', 'noCastling']
draughts_variants = ['international','frisian','frysk','antidraughts','breakthrough','russian','brazilian','pool', 'portuguese', 'english']
draughts_roles = ['man','king']
draughts_invert_colors = ['english']
lines_of_action_variants= ['linesOfAction', 'scrambledEggs']
lines_of_action_roles = ['l-piece']
flipello_roles = ['p-piece']
shogi_roles_to_imageprefix = [
    ['p-piece','FU'],
    ['l-piece','KY'],
    ['n-piece','KE'],
    ['k-piece','OU'], # white 'OU', black 'GY'
    ['k-piece','GY'], # white 'OU', black 'GY'
    ['s-piece','GI'],
    ['pp-piece','TO'],
    ['pl-piece','NY'],
    ['pn-piece','NK'],
    ['ps-piece','NG'],
    ['g-piece','KI'],
    ['b-piece','KA'],
    ['r-piece','HI'],
    ['pr-piece','RY'],
    ['pb-piece','UM']
  ]
shogi_colors = ['0','1']
shogi_variants = ['shogi', 'minishogi']
xiangqi_roles =['a-piece', 'b-piece', 'c-piece', 'k-piece', 'n-piece', 'p-piece', 'r-piece', 'pp-piece']
xiangqi_colors = ['B','R']
xiangqi_variants = ['xiangqi', 'minixiangqi']
flipello_variants = ['flipello', 'flipello10']
mancala_roles=['A-piece','B-piece','C-piece','D-piece','E-piece','F-piece','G-piece','H-piece','I-piece','J-piece','K-piece',
'L-piece','M-piece','N-piece','O-piece','P-piece','Q-piece','R-piece','S-piece','T-piece','U-piece','V-piece','W-piece',
'X-piece','Y-piece','Z-piece','a-piece','b-piece','c-piece','d-piece','e-piece','f-piece','g-piece','h-piece','i-piece',
'j-piece','k-piece','l-piece','m-piece','n-piece','o-piece','p-piece','q-piece','r-piece','s-piece','t-piece','u-piece','v-piece']
mancala_variants = ['oware']


# inline SVG Chess
chess_themes.map { |theme|
  name = theme[0]
  ext = theme[1]
  classes_chess_game = colors.map { |color|
    roles.map { |role|
      piece = color[0] + role.upcase[0]
      file = source_dir + 'chess/' + name + '/' + piece + '.' + ext
      File.open(file, 'r') do|image_file|
        image = image_file.read
        base64 = Base64.strict_encode64(image)
        '.chess.is2d .' + role + '.' + (color == 'w' ? 'p1' : 'p2') + ' {' +
          "background-image:url('data:image/" + types[ext] + base64 + "')}"
      end
    }
  }.flatten
  classes_chess_variant = chess_variants.map{ |variant|
    colors.map { |color|
      roles.map { |role|
        piece = color[0] + role.upcase[0]
        file = source_dir + 'chess/' + name + '/' + piece + '.' + ext
        File.open(file, 'r') do|image_file|
          image = image_file.read
          base64 = Base64.strict_encode64(image)
          '.is2d .variant-' + variant + ' .' + role + '.' + (color == 'w' ? 'p1' : 'p2') + ' {' +
            "background-image:url('data:image/" + types[ext] + base64 + "')}"
        end
      }
    }
  }.flatten
  File.open(dest_dir + 'chess-' + name + '.css', 'w') { |f| f.puts (classes_chess_game + classes_chess_variant).join("\n") }
}

# external SVG Chess
chess_themes.map { |theme|
  name = theme[0]
  ext = theme[1]
  classes_chess_game = colors.map { |color|
    roles.map { |role|
      piece = color[0] + role.upcase[0]
      game_class = (role == 'man' || role == 'king') ? 'draughts' : 'chess'
      '.' + game_class + '.is2d .' + role + '.' + (color == 'w' ? 'p1' : 'p2') + ' {' +
        "background-image:url('/assets/piece/" + "chess/" + name + "/" + piece + "." + ext + "')}"
    }
  }.flatten
  classes_chess_variant = chess_variants.map { |variant|
    colors.map { |color|
      roles.map { |role|
        piece = color[0] + role.upcase[0]
        game_class = (role == 'man' || role == 'king') ? 'draughts' : 'chess'
        '.is2d .variant-' + variant + ' .' + role + '.' + (color == 'w' ? 'p1' : 'p2') + ' {' +
          "background-image:url('/assets/piece/" + "chess/" + name + "/" + piece + "." + ext + "')}"
      }
    }
  }.flatten
  File.open(dest_dir + 'chess-' + name + '.external.css', 'w') { |f| f.puts (classes_chess_game + classes_chess_variant).join("\n") }
}

# inline SVG Draughts
draughts_themes.map { |theme|
  name = theme[0]
  ext = theme[1]
  classes_draughts_game = colors.map { |color|
    draughts_roles.map { |role|
      piece = color[0] + role.upcase[0]
      file = source_dir + 'draughts/' + name + '/' + piece + '.' + ext
      File.open(file, 'r') do|image_file|
        image = image_file.read
        base64 = Base64.strict_encode64(image)
        '.draughts.is2d .' + role + '.' + (color == 'w' ? 'p1' : 'p2') + ' {' +
          "background-image:url('data:image/" + types[ext] + base64 + "')}"
      end
    }
  }.flatten
  classes_draughts_variant = draughts_variants.map{ |variant|
    colors.map { |color|
      draughts_roles.map { |role|
        piece = color[0] + role.upcase[0]
        file = source_dir + 'draughts/' + name + '/' + piece + '.' + ext
        File.open(file, 'r') do|image_file|
          image = image_file.read
          base64 = Base64.strict_encode64(image)
          playerIndex = (color == 'w' && !draughts_invert_colors.include?(variant)) || (color == 'b' && draughts_invert_colors.include?(variant)) ? 'p1' : 'p2'
          '.is2d .variant-' + variant + ' .' + role + '.' + playerIndex +
            ', .is2d.variant-' + variant + ' .' + role + '.' + playerIndex + ' {' +
            "background-image:url('data:image/" + types[ext] + base64 + "')}"
        end
      }
    }
  }.flatten
  File.open(dest_dir + 'draughts-' + name + '.css', 'w') { |f| f.puts (classes_draughts_game + classes_draughts_variant).join("\n") }
}
# external SVG Draughts
draughts_themes.map { |theme|
  name = theme[0]
  ext = theme[1]
  classes_draughts_game = colors.map { |color|
    draughts_roles.map { |role|
      piece = color[0] + role.upcase[0]
      '.draughts.is2d .' + role + '.' + (color == 'w' ? 'p1' : 'p2') + ' {' +
        "background-image:url('/assets/piece/" + 'draughts/' + name + "/" + piece + "." + ext + "')}"
    }
  }.flatten
  classes_draughts_variant =  draughts_variants.map { |variant|
    colors.map { |color|
      draughts_roles.map { |role|
        piece = color[0] + role.upcase[0]
        playerIndex = (color == 'w' && !draughts_invert_colors.include?(variant)) || (color == 'b' && draughts_invert_colors.include?(variant)) ? 'p1' : 'p2'
        '.is2d .variant-' + variant + ' .' + role + '.' + playerIndex +
          ', .is2d.variant-' + variant + ' .' + role + '.' + playerIndex + ' {' +
          "background-image:url('/assets/piece/" + 'draughts/' + name + "/" + piece + "." + ext + "')}"
      }
    }
  }.flatten
  File.open(dest_dir + 'draughts-' + name + '.external.css', 'w') { |f| f.puts (classes_draughts_game + classes_draughts_variant).join("\n") }
}

# inline SVG loa
loa_themes.map { |theme|
  name = theme[0]
  ext = theme[1]
  classes_loa_game = colors.map { |color|
      lines_of_action_roles.map { |role|
        piece = color[0] + role.upcase[0]
        file = source_dir + 'loa/' + name + '/' + piece + '.' + ext
        File.open(file, 'r') do|image_file|
          image = image_file.read
          base64 = Base64.strict_encode64(image)
          '.loa.is2d .' + role + '.' + (color == 'w' ? 'p2' : 'p1') + ' {' +
            "background-image:url('data:image/" + types[ext] + base64 + "')}"
        end
      }
    }.flatten
    classes_loa_variant = lines_of_action_variants.map{ |variant|
      colors.map { |color|
        lines_of_action_roles.map { |role|
          piece = color[0] + role.upcase[0]
          file = source_dir + 'loa/' + name + '/' + piece + '.' + ext
          File.open(file, 'r') do|image_file|
            image = image_file.read
            base64 = Base64.strict_encode64(image)
            '.is2d .variant-' + variant + ' .' + role + '.' + (color == 'w' ? 'p2' : 'p1') + ' {' +
              "background-image:url('data:image/" + types[ext] + base64 + "')}"
          end
        }
      }
    }.flatten
    File.open(dest_dir + 'loa-' + name + '.css', 'w') { |f| f.puts (classes_loa_game + classes_loa_variant).join("\n") }
  }
# external SVG loa
loa_themes.map { |theme|
  name = theme[0]
  ext = theme[1]
  classes_loa_game = colors.map { |color|
    lines_of_action_roles.map { |role|
      piece = color[0] + role.upcase[0]
      '.loa.is2d .' + role + '.' + (color == 'w' ? 'p2' : 'p1') + ' {' +
          "background-image:url('/assets/piece/" + 'loa/' + name + "/" + piece + "." + ext + "')}"
      }
    }.flatten
    classes_loa_variant =  lines_of_action_variants.map { |variant|
      colors.map { |color|
      lines_of_action_roles.map { |role|
          piece = color[0] + role.upcase[0]
          '.is2d .variant-' + variant + ' .' + role + '.' + (color == 'w' ? 'p2' : 'p1') + ' {' +
            "background-image:url('/assets/piece/" + 'loa/' + name + "/" + piece + "." + ext + "')}"
        }
      }
    }.flatten
    File.open(dest_dir + 'loa-' + name + '.external.css', 'w') { |f| f.puts (classes_loa_game + classes_loa_variant).join("\n") }
}
# inline SVG shogi
shogi_themes.map { |theme|
  name = theme[0]
  ext = theme[1]
  classes_shogi_game = shogi_colors.map { |color|
    shogi_roles_to_imageprefix.map { |role_image|
      role = role_image[0]
      role_piece_prefix = role_image[1]
      piece = color[0] + role_piece_prefix
      file = source_dir + 'shogi/' + name + '/' + piece + '.' + ext
      color_class = (color == '0' ? 'ally' : 'enemy') + (role == 'k-piece' ? (role_piece_prefix == 'OU' ? '.p2' : '.p1') : '')
      File.open(file, 'r') do|image_file|
        image = image_file.read
        base64 = Base64.strict_encode64(image)
        '.shogi.is2d .' + role + '.' + color_class + ' {' +
          "background-image:url('data:image/" + types[ext] + base64 + "')}"
      end
    }
  }.flatten
  classes_shogi_variant = shogi_variants.map { |variant|
    shogi_colors.map { |color|
      shogi_roles_to_imageprefix.map { |role_image|
        role = role_image[0]
        role_piece_prefix = role_image[1]
        piece = color[0] + role_piece_prefix
        file = source_dir + 'shogi/' + name + '/' + piece + '.' + ext
        color_class = (color == '0' ? 'ally' : 'enemy') + (role == 'k-piece' ? (role_piece_prefix == 'OU' ? '.p2' : '.p1') : '')
        File.open(file, 'r') do|image_file|
          image = image_file.read
          base64 = Base64.strict_encode64(image)
          '.is2d .variant-' + variant + ' .'  + role + '.' + color_class + ' {' +
            "background-image:url('data:image/" + types[ext] + base64 + "')}"
        end
      }
    }
  }.flatten
  File.open(dest_dir + 'shogi-' + name + '.css', 'w') { |f| f.puts (classes_shogi_game + classes_shogi_variant).join("\n") }
}
# external SVG shogi
shogi_themes.map { |theme|
  name = theme[0]
  ext = theme[1]
  classes_shogi_game = shogi_colors.map { |color|
    shogi_roles_to_imageprefix.map { |role_image|
      role = role_image[0]
      role_piece_prefix = role_image[1] 
      piece = color[0] + role_piece_prefix
      color_class = (color == '0' ? 'ally' : 'enemy') + (role == 'k-piece' ? (role_piece_prefix == 'OU' ? '.p2' : '.p1') : '')
      '.shogi.is2d .' + role + '.' + color_class + ' {' +
        "background-image:url('/assets/piece/" + 'shogi/' + name + "/" + piece + "." + ext + "')}"
    }
  }.flatten
  classes_shogi_variant = shogi_variants.map { |variant|
    shogi_colors.map { |color|
      shogi_roles_to_imageprefix.map { |role_image|
        role = role_image[0]
        role_piece_prefix = role_image[1]
        piece = color[0] + role_piece_prefix
        color_class = (color == '0' ? 'ally' : 'enemy') + (role == 'k-piece' ? (role_piece_prefix == 'OU' ? '.p2' : '.p1') : '')
        '.is2d .variant-' + variant + ' .' + role + '.' + color_class + ' {' +
          "background-image:url('/assets/piece/" + 'shogi/' + name + "/" + piece + "." + ext + "')}"
      }
    }
  }.flatten
  File.open(dest_dir + 'shogi-' + name + '.external.css', 'w') { |f| f.puts (classes_shogi_game + classes_shogi_variant).join("\n") }
}

# inline SVG xiangqi
xiangqi_themes.map { |theme|
  name = theme[0]
  ext = theme[1]
  classes_xiangqi_game = xiangqi_colors.map { |color|
    xiangqi_roles.map { |role|
      piece = color[0] + (role == 'n-piece' ? 'H' : role == 'b-piece' ? 'E' : role.upcase[0])
      file = source_dir + 'xiangqi/' + name + '/' + piece + '.' + ext
      File.open(file, 'r') do|image_file|
        image = image_file.read
        base64 = Base64.strict_encode64(image)
        '.xiangqi.is2d .' + role + '.' + (color == 'R' ? 'p1' : 'p2') + ' {' +
          "background-image:url('data:image/" + types[ext] + base64 + "')}"
      end
    }
  }.flatten
  classes_xiangqi_variant = xiangqi_variants.map{ |variant|
    xiangqi_colors.map { |color|
      xiangqi_roles.map { |role|
        piece = color[0] + (role == 'n-piece' ? 'H' : role == 'b-piece' ? 'E' : role.upcase[0])
        file = source_dir + 'xiangqi/' + name + '/' + piece + '.' + ext
        File.open(file, 'r') do|image_file|
          image = image_file.read
          base64 = Base64.strict_encode64(image)
          '.is2d .variant-' + variant + ' .' + role + '.' + (color == 'R' ? 'p1' : 'p2') + ' {' +
            "background-image:url('data:image/" + types[ext] + base64 + "')}"
        end
      }
    }
  }.flatten
  File.open(dest_dir + 'xiangqi-' + name + '.css', 'w') { |f| f.puts (classes_xiangqi_game + classes_xiangqi_variant).join("\n") }
}
# external SVG xiangqi
xiangqi_themes.map { |theme|
  name = theme[0]
  ext = theme[1]
  classes_xiangqi_game = xiangqi_colors.map { |color|
    xiangqi_roles.map { |role|
      piece = color[0] + (role == 'n-piece' ? 'H' : role == 'b-piece' ? 'E' : role.upcase[0])
      '.xiangqi.is2d .' + role + '.' + (color == 'R' ? 'p1' : 'p2') + ' {' +
        "background-image:url('/assets/piece/" + 'xiangqi/' + name + "/" + piece + "." + ext + "')}"
    }
  }.flatten
  classes_xiangqi_variant = xiangqi_variants.map { |variant|
    xiangqi_colors.map { |color|
      xiangqi_roles.map { |role|
        piece = color[0] + (role == 'n-piece' ? 'H' : role == 'b-piece' ? 'E' : role.upcase[0])
        '.is2d .variant-' + variant + ' .' + role + '.' + (color == 'R' ? 'p1' : 'p2') + ' {' +
          "background-image:url('/assets/piece/" + 'xiangqi/' + name + "/" + piece + "." + ext + "')}"
      }
    }
  }.flatten
  File.open(dest_dir + 'xiangqi-' + name + '.external.css', 'w') { |f| f.puts (classes_xiangqi_game + classes_xiangqi_variant).join("\n") }
}

# inline SVG flipello (reversi)
flipello_themes.map { |theme|
  name = theme[0]
  ext = theme[1]
  classes_flipello_game = colors.map { |color|
    flipello_roles.map { |role|
      piece = color[0] + role.upcase[0]
      file = source_dir + 'flipello/' + name + '/' + piece + '.' + ext
      File.open(file, 'r') do|image_file|
        image = image_file.read
        base64 = Base64.strict_encode64(image)
        '.flipello.is2d .' + role + '.' + (color == 'w' ? 'p2' : 'p1') + ' {' +
          "background-image:url('data:image/" + types[ext] + base64 + "')}"
      end
    }
  }.flatten
  classes_flipello_variant = flipello_variants.map{ |variant|
    colors.map { |color|
      flipello_roles.map { |role|
        piece = color[0] + role.upcase[0]
        file = source_dir + 'flipello/' + name + '/' + piece + '.' + ext
        File.open(file, 'r') do|image_file|
          image = image_file.read
          base64 = Base64.strict_encode64(image)
          '.is2d .variant-' + variant + ' .' + role + '.' + (color == 'w' ? 'p2' : 'p1') + ' {' +
            "background-image:url('data:image/" + types[ext] + base64 + "')}"
        end
      }
    }
  }.flatten
  File.open(dest_dir + 'flipello-' + name + '.css', 'w') { |f| f.puts (classes_flipello_game + classes_flipello_variant).join("\n") }
}
# external SVG flipello
flipello_themes.map { |theme|
  name = theme[0]
  ext = theme[1]
  classes_flipello_game = colors.map { |color|
    flipello_roles.map { |role|
      piece = color[0] + role.upcase[0]
      '.flipello.is2d .' + role + '.' + (color == 'w' ? 'p2' : 'p1') + ' {' +
        "background-image:url('/assets/piece/" + 'flipello/' + name + "/" + piece + "." + ext + "')}"
    }
  }.flatten
  classes_flipello_variant = flipello_variants.map { |variant|
    colors.map { |color|
      flipello_roles.map { |role|
        piece = color[0] + role.upcase[0]
        '.is2d .variant-' + variant + ' .' + role + '.' + (color == 'w' ? 'p2' : 'p1') + ' {' +
          "background-image:url('/assets/piece/" + 'flipello/' + name + "/" + piece + "." + ext + "')}"
      }
    }
  }.flatten
  File.open(dest_dir + 'flipello-' + name + '.external.css', 'w') { |f| f.puts (classes_flipello_game + classes_flipello_variant).join("\n") }
}

# inline SVG mancala (oware)
mancala_themes.map { |theme|
  name = theme[0]
  ext = theme[1]
  classes_mancala_game = mancala_roles.map { |role|
      piece = role[0]
      pieceNumber = (piece.ord > 90) ? (piece.ord - 70) : (piece.ord - 64)
      file = source_dir + 'mancala/' + name + '/' + pieceNumber.to_s + '.' + ext
      File.open(file, 'r') do|image_file|
        image = image_file.read
        base64 = Base64.strict_encode64(image)
        '.mancala.is2d .' + role + ' {' +
          "background-image:url('data:image/" + types[ext] + base64 + "')}"
      end
  }.flatten
  classes_mancala_variant = mancala_variants.map{ |variant|
      mancala_roles.map { |role|
        piece = role[0]
        pieceNumber = (piece.ord > 90) ? (piece.ord - 70) : (piece.ord - 64)
        file = source_dir + 'mancala/' + name + '/' + pieceNumber.to_s + '.' + ext
        File.open(file, 'r') do|image_file|
          image = image_file.read
          base64 = Base64.strict_encode64(image)
          '.is2d .variant-' + variant + ' .' + role + ' {' +
            "background-image:url('data:image/" + types[ext] + base64 + "')}"
        end
      }
  }.flatten
  File.open(dest_dir + 'mancala-' + name + '.css', 'w') { |f| f.puts (classes_mancala_game + classes_mancala_variant).join("\n") }
}
# external SVG mancala
mancala_themes.map { |theme|
  name = theme[0]
  ext = theme[1]
  classes_mancala_game = mancala_roles.map { |role|
      piece = role[0]
      pieceNumber = (piece.ord > 90) ? (piece.ord - 70) : (piece.ord - 64)
      '.mancala.is2d .' + role + ' {' +
        "background-image:url('/assets/piece/" + 'mancala/' + name + "/" + pieceNumber.to_s + "." + ext + "')}"
  }.flatten
  classes_mancala_variant = mancala_variants.map { |variant|
      mancala_roles.map { |role|
        piece = role[0]
        pieceNumber = (piece.ord > 90) ? (piece.ord - 70) : (piece.ord - 64)
        '.is2d .variant-' + variant + ' .' + role + ' {' +
          "background-image:url('/assets/piece/" + 'mancala/' + name + "/" + pieceNumber.to_s + "." + ext + "')}"
      }
  }.flatten
  File.open(dest_dir + 'mancala-' + name + '.external.css', 'w') { |f| f.puts (classes_mancala_game + classes_mancala_variant).join("\n") }
}

