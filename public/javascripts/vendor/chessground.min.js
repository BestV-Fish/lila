(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Chessground = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.render = exports.anim = void 0;
const util = require("./util");
function anim(mutation, state) {
    return state.animation.enabled ? animate(mutation, state) : render(mutation, state);
}
exports.anim = anim;
function render(mutation, state) {
    const result = mutation(state);
    state.dom.redraw();
    return result;
}
exports.render = render;
function makePiece(key, piece) {
    return {
        key: key,
        pos: util.key2pos(key),
        piece: piece,
    };
}
function closer(piece, pieces) {
    return pieces.sort((player1, player2) => {
        return util.distanceSq(piece.pos, player1.pos) - util.distanceSq(piece.pos, player2.pos);
    })[0];
}
function computePlan(prevPieces, current) {
    const anims = new Map(), animedOrigs = [], fadings = new Map(), missings = [], news = [], prePieces = new Map();
    let curP, preP, vector;
    for (const [k, p] of prevPieces) {
        prePieces.set(k, makePiece(k, p));
    }
    for (const key of util.allKeys(current.dimensions)) {
        curP = current.pieces.get(key);
        preP = prePieces.get(key);
        if (curP) {
            if (preP) {
                if (!util.samePiece(curP, preP.piece)) {
                    missings.push(preP);
                    news.push(makePiece(key, curP));
                }
            }
            else
                news.push(makePiece(key, curP));
        }
        else if (preP)
            missings.push(preP);
    }
    for (const newP of news) {
        preP = closer(newP, missings.filter(p => util.samePiece(newP.piece, p.piece)));
        if (preP) {
            vector = [preP.pos[0] - newP.pos[0], preP.pos[1] - newP.pos[1]];
            anims.set(newP.key, vector.concat(vector));
            animedOrigs.push(preP.key);
        }
    }
    for (const p of missings) {
        if (!animedOrigs.includes(p.key))
            fadings.set(p.key, p.piece);
    }
    return {
        anims: anims,
        fadings: fadings,
    };
}
function step(state, now) {
    const cur = state.animation.current;
    if (cur === undefined) {
        if (!state.dom.destroyed)
            state.dom.redrawNow();
        return;
    }
    const rest = 1 - (now - cur.start) * cur.frequency;
    if (rest <= 0) {
        state.animation.current = undefined;
        state.dom.redrawNow();
    }
    else {
        const ease = easing(rest);
        for (const cfg of cur.plan.anims.values()) {
            cfg[2] = cfg[0] * ease;
            cfg[3] = cfg[1] * ease;
        }
        state.dom.redrawNow(true);
        requestAnimationFrame((now = performance.now()) => step(state, now));
    }
}
function animate(mutation, state) {
    const prevPieces = new Map(state.pieces);
    const result = mutation(state);
    const plan = computePlan(prevPieces, state);
    if (plan.anims.size || plan.fadings.size) {
        const alreadyRunning = state.animation.current && state.animation.current.start;
        state.animation.current = {
            start: performance.now(),
            frequency: 1 / state.animation.duration,
            plan: plan,
        };
        if (!alreadyRunning)
            step(state, performance.now());
    }
    else {
        state.dom.redraw();
    }
    return result;
}
function easing(t) {
    return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
}

},{"./util":20}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.start = void 0;
const board = require("./board");
const fen_1 = require("./fen");
const config_1 = require("./config");
const anim_1 = require("./anim");
const drag_1 = require("./drag");
const explosion_1 = require("./explosion");
function start(state, redrawAll) {
    function setOrientation(o) {
        board.setOrientation(state, o);
        redrawAll();
    }
    function toggleOrientation() {
        board.toggleOrientation(state);
        redrawAll();
    }
    return {
        set(config) {
            if (config.orientation && config.orientation !== state.orientation)
                setOrientation(config.orientation);
            (config.fen ? anim_1.anim : anim_1.render)(state => (0, config_1.configure)(state, config), state);
        },
        state,
        getFen: () => (0, fen_1.write)(state.pieces, state.dimensions, state.variant),
        toggleOrientation,
        setPieces(pieces) {
            (0, anim_1.anim)(state => board.setPieces(state, pieces), state);
        },
        selectSquare(key, force) {
            if (key)
                (0, anim_1.anim)(state => board.selectSquare(state, key, force), state);
            else if (state.selected) {
                board.unselect(state);
                state.dom.redraw();
            }
        },
        move(orig, dest) {
            (0, anim_1.anim)(state => board.baseMove(state, orig, dest), state);
        },
        newPiece(piece, key) {
            (0, anim_1.anim)(state => board.baseNewPiece(state, piece, key), state);
        },
        playPremove() {
            if (state.premovable.current) {
                if ((0, anim_1.anim)(board.playPremove, state))
                    return true;
                state.dom.redraw();
            }
            return false;
        },
        playPredrop(validate) {
            if (state.predroppable.current) {
                const result = board.playPredrop(state, validate);
                state.dom.redraw();
                return result;
            }
            return false;
        },
        cancelPremove() {
            (0, anim_1.render)(board.unsetPremove, state);
        },
        cancelPredrop() {
            (0, anim_1.render)(board.unsetPredrop, state);
        },
        cancelMove() {
            (0, anim_1.render)(state => {
                board.cancelMove(state);
                (0, drag_1.cancel)(state);
            }, state);
        },
        stop() {
            (0, anim_1.render)(state => {
                board.stop(state);
                (0, drag_1.cancel)(state);
            }, state);
        },
        explode(keys) {
            (0, explosion_1.default)(state, keys);
        },
        setAutoShapes(shapes) {
            (0, anim_1.render)(state => (state.drawable.autoShapes = shapes), state);
        },
        setShapes(shapes) {
            (0, anim_1.render)(state => (state.drawable.shapes = shapes), state);
        },
        getKeyAtDomPos(pos) {
            return board.getKeyAtDomPos(pos, state.orientation, state.dom.bounds(), state.dimensions);
        },
        redrawAll,
        dragNewPiece(piece, event, force) {
            (0, drag_1.dragNewPiece)(state, piece, event, force);
        },
        destroy() {
            board.stop(state);
            state.dom.unbind && state.dom.unbind();
            state.dom.destroyed = true;
        },
    };
}
exports.start = start;

},{"./anim":1,"./board":3,"./config":5,"./drag":6,"./explosion":10,"./fen":11}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSnappedKeyAtDomPos = exports.p1Pov = exports.getKeyAtDomPos = exports.stop = exports.cancelMove = exports.playPredrop = exports.playPremove = exports.isDraggable = exports.isPredroppable = exports.canMove = exports.unselect = exports.setSelected = exports.selectSquare = exports.dropNewPiece = exports.userMove = exports.baseNewPiece = exports.baseMove = exports.unsetPredrop = exports.unsetPremove = exports.setPieces = exports.reset = exports.toggleOrientation = exports.setOrientation = void 0;
const util_1 = require("./util");
const premove_1 = require("./premove");
const predrop_1 = require("./predrop");
const T = require("./transformations");
function setOrientation(state, o) {
    state.orientation = o;
    state.animation.current = state.draggable.current = state.selected = undefined;
}
exports.setOrientation = setOrientation;
function toggleOrientation(state) {
    setOrientation(state, (0, util_1.oppositeOrientation)(state.orientation));
}
exports.toggleOrientation = toggleOrientation;
function reset(state) {
    state.lastMove = undefined;
    unselect(state);
    unsetPremove(state);
    unsetPredrop(state);
}
exports.reset = reset;
function setPieces(state, pieces) {
    for (const [key, piece] of pieces) {
        if (piece)
            state.pieces.set(key, piece);
        else
            state.pieces.delete(key);
    }
}
exports.setPieces = setPieces;
function setPremove(state, orig, dest, meta) {
    unsetPredrop(state);
    state.premovable.current = [orig, dest];
    (0, util_1.callUserFunction)(state.premovable.events.set, orig, dest, meta);
}
function unsetPremove(state) {
    if (state.premovable.current) {
        state.premovable.current = undefined;
        (0, util_1.callUserFunction)(state.premovable.events.unset);
    }
}
exports.unsetPremove = unsetPremove;
function setPredrop(state, role, key) {
    unsetPremove(state);
    state.predroppable.current = { role, key };
    (0, util_1.callUserFunction)(state.predroppable.events.set, role, key);
}
function unsetPredrop(state) {
    const pd = state.predroppable;
    if (pd.current) {
        pd.current = undefined;
        (0, util_1.callUserFunction)(pd.events.unset);
    }
}
exports.unsetPredrop = unsetPredrop;
function cancelDropMode(s) {
    var _a;
    s.dropmode.active = false;
    (0, util_1.callUserFunction)((_a = s.dropmode.events) === null || _a === void 0 ? void 0 : _a.cancel);
}
function tryAutoCastle(state, orig, dest) {
    if (!state.autoCastle)
        return false;
    const king = state.pieces.get(orig);
    if (!king || king.role !== 'k-piece')
        return false;
    const origPos = (0, util_1.key2pos)(orig);
    const destPos = (0, util_1.key2pos)(dest);
    if ((origPos[1] !== 1 && origPos[1] !== 8) || origPos[1] !== destPos[1])
        return false;
    if (origPos[0] === 5 && !state.pieces.has(dest)) {
        if (destPos[0] === 7)
            dest = (0, util_1.pos2key)([8, destPos[1]]);
        else if (destPos[0] === 3)
            dest = (0, util_1.pos2key)([1, destPos[1]]);
    }
    const rook = state.pieces.get(dest);
    if (!rook || rook.playerIndex !== king.playerIndex || rook.role !== 'r-piece')
        return false;
    state.pieces.delete(orig);
    state.pieces.delete(dest);
    if (origPos[0] < destPos[0]) {
        state.pieces.set((0, util_1.pos2key)([7, destPos[1]]), king);
        state.pieces.set((0, util_1.pos2key)([6, destPos[1]]), rook);
    }
    else {
        state.pieces.set((0, util_1.pos2key)([3, destPos[1]]), king);
        state.pieces.set((0, util_1.pos2key)([4, destPos[1]]), rook);
    }
    return true;
}
function baseMove(state, orig, dest) {
    const origPiece = state.pieces.get(orig), destPiece = state.pieces.get(dest);
    if (orig === dest || !origPiece)
        return false;
    const captured = destPiece && destPiece.playerIndex !== origPiece.playerIndex ? destPiece : undefined;
    if (dest === state.selected)
        unselect(state);
    (0, util_1.callUserFunction)(state.events.move, orig, dest, captured);
    if (!tryAutoCastle(state, orig, dest)) {
        state.pieces.set(dest, origPiece);
        state.pieces.delete(orig);
    }
    state.lastMove = [orig, dest];
    state.check = undefined;
    (0, util_1.callUserFunction)(state.events.change);
    return captured || true;
}
exports.baseMove = baseMove;
function baseNewPiece(state, piece, key, force) {
    if (state.pieces.has(key)) {
        if (force)
            state.pieces.delete(key);
        else
            return false;
    }
    (0, util_1.callUserFunction)(state.events.dropNewPiece, piece, key);
    state.pieces.set(key, piece);
    state.lastMove = [key];
    state.check = undefined;
    (0, util_1.callUserFunction)(state.events.change);
    state.movable.dests = undefined;
    state.dropmode.dropDests = undefined;
    state.turnPlayerIndex = (0, util_1.opposite)(state.turnPlayerIndex);
    return true;
}
exports.baseNewPiece = baseNewPiece;
function baseUserMove(state, orig, dest) {
    const result = baseMove(state, orig, dest);
    if (result) {
        state.movable.dests = undefined;
        state.dropmode.dropDests = undefined;
        state.turnPlayerIndex = (0, util_1.opposite)(state.turnPlayerIndex);
        state.animation.current = undefined;
    }
    return result;
}
function userMove(state, orig, dest) {
    if (canMove(state, orig, dest)) {
        const result = baseUserMove(state, orig, dest);
        if (result) {
            const holdTime = state.hold.stop();
            unselect(state);
            const metadata = {
                premove: false,
                ctrlKey: state.stats.ctrlKey,
                holdTime,
            };
            if (result !== true)
                metadata.captured = result;
            (0, util_1.callUserFunction)(state.movable.events.after, orig, dest, metadata);
            return true;
        }
    }
    else if (canPremove(state, orig, dest)) {
        setPremove(state, orig, dest, {
            ctrlKey: state.stats.ctrlKey,
        });
        unselect(state);
        return true;
    }
    unselect(state);
    return false;
}
exports.userMove = userMove;
function dropNewPiece(state, orig, dest, force) {
    const piece = state.pieces.get(orig);
    if (piece && (canDrop(state, orig, dest) || force)) {
        state.pieces.delete(orig);
        baseNewPiece(state, piece, dest, force);
        (0, util_1.callUserFunction)(state.movable.events.afterNewPiece, piece.role, dest, {
            premove: false,
            predrop: false,
        });
    }
    else if (piece && canPredrop(state, orig, dest)) {
        setPredrop(state, piece.role, dest);
    }
    else {
        unsetPremove(state);
        unsetPredrop(state);
        cancelDropMode(state);
    }
    state.pieces.delete(orig);
    unselect(state);
}
exports.dropNewPiece = dropNewPiece;
function selectSquare(state, key, force) {
    (0, util_1.callUserFunction)(state.events.select, key);
    if (state.selected) {
        if (state.selected === key && !state.draggable.enabled) {
            unselect(state);
            state.hold.cancel();
            return;
        }
        else if ((state.selectable.enabled || force) && state.selected !== key) {
            if (userMove(state, state.selected, key)) {
                state.stats.dragged = false;
                return;
            }
        }
    }
    if (isMovable(state, key) || isPremovable(state, key)) {
        setSelected(state, key);
        state.hold.start();
    }
}
exports.selectSquare = selectSquare;
function setSelected(state, key) {
    state.selected = key;
    if (isPremovable(state, key)) {
        state.premovable.dests = (0, premove_1.premove)(state.pieces, key, state.premovable.castle, state.dimensions, state.variant, state.chess960);
    }
    else {
        state.premovable.dests = undefined;
        state.predroppable.dropDests = undefined;
    }
}
exports.setSelected = setSelected;
function unselect(state) {
    state.selected = undefined;
    state.premovable.dests = undefined;
    state.predroppable.dropDests = undefined;
    state.hold.cancel();
}
exports.unselect = unselect;
function isMovable(state, orig) {
    const piece = state.pieces.get(orig);
    return (!!piece &&
        (!state.onlyDropsVariant || (state.onlyDropsVariant && orig === 'a0')) &&
        (state.movable.playerIndex === 'both' ||
            (state.movable.playerIndex === piece.playerIndex && state.turnPlayerIndex === piece.playerIndex)));
}
function canMove(state, orig, dest) {
    var _a, _b;
    return (orig !== dest && isMovable(state, orig) && (state.movable.free || !!((_b = (_a = state.movable.dests) === null || _a === void 0 ? void 0 : _a.get(orig)) === null || _b === void 0 ? void 0 : _b.includes(dest))));
}
exports.canMove = canMove;
function canDrop(state, orig, dest) {
    const piece = state.pieces.get(orig);
    return (!!piece &&
        (orig === dest || !state.pieces.has(dest)) &&
        (state.movable.playerIndex === 'both' ||
            (state.movable.playerIndex === piece.playerIndex && state.turnPlayerIndex === piece.playerIndex)));
}
function isPremovable(state, orig) {
    const piece = state.pieces.get(orig);
    return (!!piece &&
        state.premovable.enabled &&
        state.movable.playerIndex === piece.playerIndex &&
        state.turnPlayerIndex !== piece.playerIndex);
}
function isPredroppable(state) {
    var _a, _b;
    const piece = state.dropmode.active ? state.dropmode.piece : (_a = state.draggable.current) === null || _a === void 0 ? void 0 : _a.piece;
    return (!!piece &&
        (state.dropmode.active || ((_b = state.draggable.current) === null || _b === void 0 ? void 0 : _b.orig) === 'a0') &&
        state.predroppable.enabled &&
        state.movable.playerIndex === piece.playerIndex &&
        state.turnPlayerIndex !== piece.playerIndex);
}
exports.isPredroppable = isPredroppable;
function canPremove(state, orig, dest) {
    return (orig !== dest &&
        isPremovable(state, orig) &&
        (0, util_1.containsX)((0, premove_1.premove)(state.pieces, orig, state.premovable.castle, state.dimensions, state.variant, state.chess960), dest));
}
function canPredrop(state, orig, dest) {
    const piece = state.pieces.get(orig);
    const destPiece = state.pieces.get(dest);
    if (!piece) {
        return false;
    }
    const isValidPredrop = (0, util_1.containsX)((0, predrop_1.default)(state.pieces, piece, state.dimensions, state.variant), dest);
    return ((!destPiece || destPiece.playerIndex !== state.movable.playerIndex) &&
        state.predroppable.enabled &&
        isValidPredrop &&
        state.movable.playerIndex === piece.playerIndex &&
        state.turnPlayerIndex !== piece.playerIndex);
}
function isDraggable(state, orig) {
    const piece = state.pieces.get(orig);
    return (!!piece &&
        state.draggable.enabled &&
        (state.movable.playerIndex === 'both' ||
            (state.movable.playerIndex === piece.playerIndex &&
                (state.turnPlayerIndex === piece.playerIndex || state.premovable.enabled))));
}
exports.isDraggable = isDraggable;
function playPremove(state) {
    const move = state.premovable.current;
    if (!move)
        return false;
    const orig = move[0], dest = move[1];
    let success = false;
    if (canMove(state, orig, dest)) {
        const result = baseUserMove(state, orig, dest);
        if (result) {
            const metadata = { premove: true };
            if (result !== true)
                metadata.captured = result;
            (0, util_1.callUserFunction)(state.movable.events.after, orig, dest, metadata);
            success = true;
        }
    }
    unsetPremove(state);
    return success;
}
exports.playPremove = playPremove;
function playPredrop(state, validate) {
    const drop = state.predroppable.current;
    let success = false;
    if (!drop)
        return false;
    if (validate(drop)) {
        const piece = {
            role: drop.role,
            playerIndex: state.movable.playerIndex,
        };
        if (baseNewPiece(state, piece, drop.key)) {
            (0, util_1.callUserFunction)(state.movable.events.afterNewPiece, drop.role, drop.key, {
                premove: false,
                predrop: true,
            });
            success = true;
        }
    }
    unsetPredrop(state);
    return success;
}
exports.playPredrop = playPredrop;
function cancelMove(state) {
    unsetPremove(state);
    unsetPredrop(state);
    unselect(state);
}
exports.cancelMove = cancelMove;
function stop(state) {
    state.movable.playerIndex = state.movable.dests = state.dropmode.dropDests = state.animation.current = undefined;
    cancelMove(state);
}
exports.stop = stop;
function getKeyAtDomPos(pos, orientation, bounds, bd) {
    const file = Math.ceil(bd.width * ((pos[0] - bounds.left) / bounds.width));
    const rank = Math.ceil(bd.height - bd.height * ((pos[1] - bounds.top) / bounds.height));
    pos = [file, rank];
    pos = T.mapToP1[orientation](pos, bd);
    return pos[0] > 0 && pos[0] < bd.width + 1 && pos[1] > 0 && pos[1] < bd.height + 1 ? (0, util_1.pos2key)(pos) : undefined;
}
exports.getKeyAtDomPos = getKeyAtDomPos;
function p1Pov(s) {
    return s.myPlayerIndex === 'p1';
}
exports.p1Pov = p1Pov;
function getSnappedKeyAtDomPos(orig, pos, orientation, bounds, bd) {
    const origPos = (0, util_1.key2pos)(orig);
    const validSnapPos = (0, util_1.allPos)(bd).filter(pos2 => {
        return (0, premove_1.queen)(origPos[0], origPos[1], pos2[0], pos2[1]) || (0, premove_1.knight)(origPos[0], origPos[1], pos2[0], pos2[1]);
    });
    const validSnapCenters = validSnapPos.map(pos2 => (0, util_1.computeSquareCenter)((0, util_1.pos2key)(pos2), orientation, bounds, bd));
    const validSnapDistances = validSnapCenters.map(pos2 => (0, util_1.distanceSq)(pos, pos2));
    const [, closestSnapIndex] = validSnapDistances.reduce((a, b, index) => (a[0] < b ? a : [b, index]), [validSnapDistances[0], 0]);
    return (0, util_1.pos2key)(validSnapPos[closestSnapIndex]);
}
exports.getSnappedKeyAtDomPos = getSnappedKeyAtDomPos;

},{"./predrop":13,"./premove":14,"./transformations":18,"./util":20}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Chessground = void 0;
const api_1 = require("./api");
const config_1 = require("./config");
const state_1 = require("./state");
const wrap_1 = require("./wrap");
const events = require("./events");
const render_1 = require("./render");
const svg = require("./svg");
const util = require("./util");
function Chessground(element, config) {
    const maybeState = (0, state_1.defaults)();
    (0, config_1.configure)(maybeState, config || {});
    function redrawAll() {
        const prevUnbind = 'dom' in maybeState ? maybeState.dom.unbind : undefined;
        const relative = maybeState.viewOnly && !maybeState.drawable.visible, elements = (0, wrap_1.renderWrap)(element, maybeState, relative), bounds = util.memo(() => elements.board.getBoundingClientRect()), redrawNow = (skipSvg) => {
            (0, render_1.render)(state);
            if (!skipSvg && elements.svg)
                svg.renderSvg(state, elements.svg, elements.customSvg);
        }, boundsUpdated = () => {
            bounds.clear();
            (0, render_1.updateBounds)(state);
            if (elements.svg)
                svg.renderSvg(state, elements.svg, elements.customSvg);
        };
        const state = maybeState;
        state.dom = {
            elements,
            bounds,
            redraw: debounceRedraw(redrawNow),
            redrawNow,
            unbind: prevUnbind,
            relative,
        };
        state.drawable.prevSvgHash = '';
        redrawNow(false);
        events.bindBoard(state, boundsUpdated);
        if (!prevUnbind)
            state.dom.unbind = events.bindDocument(state, boundsUpdated);
        state.events.insert && state.events.insert(elements);
        return state;
    }
    return (0, api_1.start)(redrawAll(), redrawAll);
}
exports.Chessground = Chessground;
function debounceRedraw(redrawNow) {
    let redrawing = false;
    return () => {
        if (redrawing)
            return;
        redrawing = true;
        requestAnimationFrame(() => {
            redrawNow();
            redrawing = false;
        });
    };
}

},{"./api":2,"./config":5,"./events":9,"./render":15,"./state":16,"./svg":17,"./util":20,"./wrap":21}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.configure = void 0;
const board_1 = require("./board");
const fen_1 = require("./fen");
function configure(state, config) {
    var _a, _b;
    if (config.movable && config.movable.dests)
        state.movable.dests = undefined;
    if ((_a = config.dropmode) === null || _a === void 0 ? void 0 : _a.dropDests)
        state.dropmode.dropDests = undefined;
    if ((_b = config.drawable) === null || _b === void 0 ? void 0 : _b.autoShapes)
        state.drawable.autoShapes = [];
    merge(state, config);
    if (config.dimensions)
        state.dimensions = config.dimensions;
    if (config.fen) {
        const pieces = (0, fen_1.read)(config.fen, state.dimensions, state.variant);
        if (state.pieces.get('a0') !== undefined)
            pieces.set('a0', state.pieces.get('a0'));
        state.pieces = pieces;
        state.drawable.shapes = [];
    }
    if ('check' in config)
        setCheck(state, config.check || false);
    if ('lastMove' in config && !config.lastMove)
        state.lastMove = undefined;
    else if (config.lastMove)
        state.lastMove = config.lastMove;
    if (state.selected)
        (0, board_1.setSelected)(state, state.selected);
    if (!state.animation.duration || state.animation.duration < 100)
        state.animation.enabled = false;
    if (!state.movable.rookCastle && state.movable.dests) {
        const rank = state.movable.playerIndex === 'p1' ? 1 : 8, kingStartPos = ('e' + rank), dests = state.movable.dests.get(kingStartPos), king = state.pieces.get(kingStartPos);
        if (!dests || !king || king.role !== 'k-piece')
            return;
        state.movable.dests.set(kingStartPos, dests.filter(d => !(d === 'a' + rank && dests.includes(('c' + rank))) &&
            !(d === 'h' + rank && dests.includes(('g' + rank)))));
    }
}
exports.configure = configure;
function setCheck(state, playerIndex) {
    state.check = undefined;
    if (playerIndex === true)
        playerIndex = state.turnPlayerIndex;
    if (playerIndex)
        for (const [k, p] of state.pieces) {
            if (p.role === 'k-piece' && p.playerIndex === playerIndex) {
                state.check = k;
            }
        }
}
function merge(base, extend) {
    for (const key in extend) {
        if (isObject(base[key]) && isObject(extend[key]))
            merge(base[key], extend[key]);
        else
            base[key] = extend[key];
    }
}
function isObject(o) {
    return typeof o === 'object';
}

},{"./board":3,"./fen":11}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.cancel = exports.end = exports.move = exports.dragNewPiece = exports.start = void 0;
const board = require("./board");
const util = require("./util");
const draw_1 = require("./draw");
const anim_1 = require("./anim");
const predrop_1 = require("./predrop");
const T = require("./transformations");
function start(s, e) {
    if (!e.isTrusted || (e.button !== undefined && e.button !== 0))
        return;
    if (e.touches && e.touches.length > 1)
        return;
    const bounds = s.dom.bounds(), position = util.eventPosition(e), orig = board.getKeyAtDomPos(position, s.orientation, bounds, s.dimensions);
    if (!orig)
        return;
    const piece = s.pieces.get(orig);
    const previouslySelected = s.selected;
    if (!previouslySelected &&
        s.drawable.enabled &&
        (s.drawable.eraseOnClick || !piece || piece.playerIndex !== s.turnPlayerIndex))
        (0, draw_1.clear)(s);
    if (e.cancelable !== false &&
        (!e.touches || !s.movable.playerIndex || piece || previouslySelected || pieceCloseTo(s, position)))
        e.preventDefault();
    const hadPremove = !!s.premovable.current;
    const hadPredrop = !!s.predroppable.current;
    s.stats.ctrlKey = e.ctrlKey;
    if (s.selected && board.canMove(s, s.selected, orig)) {
        (0, anim_1.anim)(state => board.selectSquare(state, orig), s);
    }
    else {
        board.selectSquare(s, orig);
    }
    const stillSelected = s.selected === orig;
    const element = pieceElementByKey(s, orig);
    if (piece && element && stillSelected && board.isDraggable(s, orig)) {
        const squareBounds = computeSquareBounds(orig, bounds, s.dimensions, s.orientation);
        s.draggable.current = {
            orig,
            origPos: util.key2pos(orig),
            piece,
            rel: position,
            epos: position,
            pos: [0, 0],
            dec: s.draggable.centerPiece
                ? [
                    position[0] - (squareBounds.left + squareBounds.width / 2),
                    position[1] - (squareBounds.top + squareBounds.height / 2),
                ]
                : [0, 0],
            started: s.draggable.autoDistance && s.stats.dragged,
            element,
            previouslySelected,
            originTarget: e.target,
        };
        element.cgDragging = true;
        element.classList.add('dragging');
        const ghost = s.dom.elements.ghost;
        if (ghost) {
            const promoted = piece.promoted ? 'promoted ' : '';
            const side = piece.playerIndex === s.myPlayerIndex ? 'ally' : 'enemy';
            ghost.className = `ghost ${piece.playerIndex} ${promoted}${piece.role} ${side}`;
            util.translateAbs(ghost, util.posToTranslateAbs(bounds, s.dimensions)(util.key2pos(orig), s.orientation));
            util.setVisible(ghost, true);
        }
        processDrag(s);
    }
    else {
        if (hadPremove)
            board.unsetPremove(s);
        if (hadPredrop)
            board.unsetPredrop(s);
    }
    s.dom.redraw();
}
exports.start = start;
function pieceCloseTo(s, pos) {
    const orientation = s.orientation, bounds = s.dom.bounds(), radiusSq = Math.pow(bounds.width / 8, 2);
    for (const key in s.pieces) {
        const squareBounds = computeSquareBounds(key, bounds, s.dimensions, orientation), center = [squareBounds.left + squareBounds.width / 2, squareBounds.top + squareBounds.height / 2];
        if (util.distanceSq(center, pos) <= radiusSq)
            return true;
    }
    return false;
}
function dragNewPiece(s, piece, e, force) {
    const key = 'a0';
    s.pieces.set(key, piece);
    s.dom.redraw();
    const position = util.eventPosition(e), asP1 = board.p1Pov(s), bounds = s.dom.bounds(), squareBounds = computeSquareBounds(key, bounds, s.dimensions, s.orientation);
    const rel = [
        (asP1 ? 0 : s.dimensions.width - 1) * squareBounds.width + bounds.left,
        (asP1 ? s.dimensions.height : -1) * squareBounds.height + bounds.top,
    ];
    s.draggable.current = {
        orig: key,
        origPos: util.key2pos('a0'),
        piece,
        rel,
        epos: position,
        pos: [position[0] - rel[0], position[1] - rel[1]],
        dec: [-squareBounds.width / 2, -squareBounds.height / 2],
        started: true,
        element: () => pieceElementByKey(s, key),
        originTarget: e.target,
        newPiece: true,
        force: !!force,
    };
    if (piece && board.isPredroppable(s)) {
        s.predroppable.dropDests = (0, predrop_1.default)(s.pieces, piece, s.dimensions, s.variant);
    }
    processDrag(s);
}
exports.dragNewPiece = dragNewPiece;
function processDrag(s) {
    requestAnimationFrame(() => {
        var _a;
        const cur = s.draggable.current;
        if (!cur)
            return;
        if ((_a = s.animation.current) === null || _a === void 0 ? void 0 : _a.plan.anims.has(cur.orig))
            s.animation.current = undefined;
        const origPiece = s.pieces.get(cur.orig);
        if (!origPiece || !util.samePiece(origPiece, cur.piece))
            cancel(s);
        else {
            if (!cur.started && util.distanceSq(cur.epos, cur.rel) >= Math.pow(s.draggable.distance, 2))
                cur.started = true;
            if (cur.started) {
                if (typeof cur.element === 'function') {
                    const found = cur.element();
                    if (!found)
                        return;
                    found.cgDragging = true;
                    found.classList.add('dragging');
                    cur.element = found;
                }
                cur.pos = [cur.epos[0] - cur.rel[0], cur.epos[1] - cur.rel[1]];
                const translation = util.posToTranslateAbs(s.dom.bounds(), s.dimensions)(cur.origPos, s.orientation);
                translation[0] += cur.pos[0] + cur.dec[0];
                translation[1] += cur.pos[1] + cur.dec[1];
                util.translateAbs(cur.element, translation);
            }
        }
        processDrag(s);
    });
}
function move(s, e) {
    if (s.draggable.current && (!e.touches || e.touches.length < 2)) {
        s.draggable.current.epos = util.eventPosition(e);
    }
}
exports.move = move;
function end(s, e) {
    const cur = s.draggable.current;
    if (!cur)
        return;
    if (e.type === 'touchend' && e.cancelable !== false)
        e.preventDefault();
    if (e.type === 'touchend' && cur && cur.originTarget !== e.target && !cur.newPiece) {
        s.draggable.current = undefined;
        return;
    }
    board.unsetPremove(s);
    board.unsetPredrop(s);
    const eventPos = util.eventPosition(e) || cur.epos;
    const dest = board.getKeyAtDomPos(eventPos, s.orientation, s.dom.bounds(), s.dimensions);
    if (dest && cur.started && cur.orig !== dest) {
        if (cur.newPiece)
            board.dropNewPiece(s, cur.orig, dest, cur.force);
        else {
            s.stats.ctrlKey = e.ctrlKey;
            if (board.userMove(s, cur.orig, dest))
                s.stats.dragged = true;
        }
    }
    else if (cur.newPiece) {
        s.pieces.delete(cur.orig);
    }
    else if (s.draggable.deleteOnDropOff && !dest) {
        s.pieces.delete(cur.orig);
        util.callUserFunction(s.events.change);
    }
    if (cur && cur.orig === cur.previouslySelected && (cur.orig === dest || !dest))
        board.unselect(s);
    else if (!s.selectable.enabled)
        board.unselect(s);
    removeDragElements(s);
    s.draggable.current = undefined;
    s.dom.redraw();
}
exports.end = end;
function cancel(s) {
    const cur = s.draggable.current;
    if (cur) {
        if (cur.newPiece)
            s.pieces.delete(cur.orig);
        s.draggable.current = undefined;
        board.unselect(s);
        removeDragElements(s);
        s.dom.redraw();
    }
}
exports.cancel = cancel;
function removeDragElements(s) {
    const e = s.dom.elements;
    if (e.ghost)
        util.setVisible(e.ghost, false);
}
function computeSquareBounds(key, bounds, bd, orientation) {
    const pos = T.mapToP1Inverse[orientation](util.key2pos(key), bd);
    return {
        left: bounds.left + (bounds.width * (pos[0] - 1)) / bd.width,
        top: bounds.top + (bounds.height * (bd.height - pos[1])) / bd.height,
        width: bounds.width / bd.width,
        height: bounds.height / bd.height,
    };
}
function pieceElementByKey(s, key) {
    let el = s.dom.elements.board.firstChild;
    while (el) {
        if (el.cgKey === key && el.tagName === 'PIECE')
            return el;
        el = el.nextSibling;
    }
    return;
}

},{"./anim":1,"./board":3,"./draw":7,"./predrop":13,"./transformations":18,"./util":20}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.clear = exports.cancel = exports.end = exports.move = exports.processDraw = exports.start = void 0;
const board_1 = require("./board");
const util_1 = require("./util");
const brushes = ['green', 'red', 'blue', 'yellow'];
function start(state, e) {
    if (e.touches && e.touches.length > 1)
        return;
    e.stopPropagation();
    e.preventDefault();
    e.ctrlKey ? (0, board_1.unselect)(state) : (0, board_1.cancelMove)(state);
    const pos = (0, util_1.eventPosition)(e), orig = (0, board_1.getKeyAtDomPos)(pos, state.orientation, state.dom.bounds(), state.dimensions);
    if (!orig)
        return;
    state.drawable.current = {
        orig,
        pos,
        brush: eventBrush(e),
        snapToValidMove: state.drawable.defaultSnapToValidMove,
    };
    processDraw(state);
}
exports.start = start;
function processDraw(state) {
    requestAnimationFrame(() => {
        const cur = state.drawable.current;
        if (cur) {
            const keyAtDomPos = (0, board_1.getKeyAtDomPos)(cur.pos, state.orientation, state.dom.bounds(), state.dimensions);
            if (!keyAtDomPos) {
                cur.snapToValidMove = false;
            }
            const mouseSq = cur.snapToValidMove
                ? (0, board_1.getSnappedKeyAtDomPos)(cur.orig, cur.pos, state.orientation, state.dom.bounds(), state.dimensions)
                : keyAtDomPos;
            if (mouseSq !== cur.mouseSq) {
                cur.mouseSq = mouseSq;
                cur.dest = mouseSq !== cur.orig ? mouseSq : undefined;
                state.dom.redrawNow();
            }
            processDraw(state);
        }
    });
}
exports.processDraw = processDraw;
function move(state, e) {
    if (state.drawable.current)
        state.drawable.current.pos = (0, util_1.eventPosition)(e);
}
exports.move = move;
function end(state) {
    const cur = state.drawable.current;
    if (cur) {
        if (cur.mouseSq)
            addShape(state.drawable, cur);
        cancel(state);
    }
}
exports.end = end;
function cancel(state) {
    if (state.drawable.current) {
        state.drawable.current = undefined;
        state.dom.redraw();
    }
}
exports.cancel = cancel;
function clear(state) {
    if (state.drawable.shapes.length) {
        state.drawable.shapes = [];
        state.dom.redraw();
        onChange(state.drawable);
    }
}
exports.clear = clear;
function eventBrush(e) {
    var _a;
    const modA = (e.shiftKey || e.ctrlKey) && (0, util_1.isRightButton)(e);
    const modB = e.altKey || e.metaKey || ((_a = e.getModifierState) === null || _a === void 0 ? void 0 : _a.call(e, 'AltGraph'));
    return brushes[(modA ? 1 : 0) + (modB ? 2 : 0)];
}
function addShape(drawable, cur) {
    const sameShape = (s) => s.orig === cur.orig && s.dest === cur.dest;
    const similar = drawable.shapes.filter(sameShape)[0];
    if (similar)
        drawable.shapes = drawable.shapes.filter(s => !sameShape(s));
    if (!similar || similar.brush !== cur.brush)
        drawable.shapes.push(cur);
    onChange(drawable);
}
function onChange(drawable) {
    if (drawable.onChange)
        drawable.onChange(drawable.shapes);
}

},{"./board":3,"./util":20}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.drop = exports.cancelDropMode = exports.setDropMode = void 0;
const board = require("./board");
const util = require("./util");
const drag_1 = require("./drag");
const predrop_1 = require("./predrop");
function setDropMode(s, piece) {
    s.dropmode.active = true;
    s.dropmode.piece = piece;
    (0, drag_1.cancel)(s);
    board.unselect(s);
    if (piece && board.isPredroppable(s)) {
        s.predroppable.dropDests = (0, predrop_1.default)(s.pieces, piece, s.dimensions, s.variant);
    }
}
exports.setDropMode = setDropMode;
function cancelDropMode(s) {
    var _a;
    s.dropmode.active = false;
    util.callUserFunction((_a = s.dropmode.events) === null || _a === void 0 ? void 0 : _a.cancel);
}
exports.cancelDropMode = cancelDropMode;
function drop(s, e) {
    if (!s.dropmode.active)
        return;
    board.unsetPremove(s);
    board.unsetPredrop(s);
    const piece = s.dropmode.piece;
    if (piece) {
        s.pieces.set('a0', piece);
        const position = util.eventPosition(e);
        const dest = position && board.getKeyAtDomPos(position, s.orientation, s.dom.bounds(), s.dimensions);
        if (dest)
            board.dropNewPiece(s, 'a0', dest);
    }
    s.dom.redraw();
}
exports.drop = drop;

},{"./board":3,"./drag":6,"./predrop":13,"./util":20}],9:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.bindDocument = exports.bindBoard = void 0;
const drag = require("./drag");
const draw = require("./draw");
const drop_1 = require("./drop");
const util_1 = require("./util");
const board_1 = require("./board");
function bindBoard(s, boundsUpdated) {
    const boardEl = s.dom.elements.board;
    if (!s.dom.relative && s.resizable && 'ResizeObserver' in window) {
        const observer = new window['ResizeObserver'](boundsUpdated);
        observer.observe(boardEl);
    }
    if (s.viewOnly)
        return;
    const onStart = startDragOrDraw(s);
    boardEl.addEventListener('touchstart', onStart, { passive: false });
    boardEl.addEventListener('mousedown', onStart, { passive: false });
    if (s.disableContextMenu || s.drawable.enabled) {
        boardEl.addEventListener('contextmenu', e => e.preventDefault());
    }
}
exports.bindBoard = bindBoard;
function bindDocument(s, boundsUpdated) {
    const unbinds = [];
    if (!s.dom.relative && s.resizable && !('ResizeObserver' in window)) {
        unbinds.push(unbindable(document.body, 'chessground.resize', boundsUpdated));
    }
    if (!s.viewOnly) {
        const onmove = dragOrDraw(s, drag.move, draw.move);
        const onend = dragOrDraw(s, drag.end, draw.end);
        for (const ev of ['touchmove', 'mousemove'])
            unbinds.push(unbindable(document, ev, onmove));
        for (const ev of ['touchend', 'mouseup'])
            unbinds.push(unbindable(document, ev, onend));
        const onScroll = () => s.dom.bounds.clear();
        unbinds.push(unbindable(document, 'scroll', onScroll, { capture: true, passive: true }));
        unbinds.push(unbindable(window, 'resize', onScroll, { passive: true }));
    }
    return () => unbinds.forEach(f => f());
}
exports.bindDocument = bindDocument;
function unbindable(el, eventName, callback, options) {
    el.addEventListener(eventName, callback, options);
    return () => el.removeEventListener(eventName, callback, options);
}
function startDragOrDraw(s) {
    return e => {
        var _a;
        if (s.draggable.current)
            drag.cancel(s);
        else if (s.drawable.current)
            draw.cancel(s);
        else if (e.shiftKey || (0, util_1.isRightButton)(e)) {
            if (s.drawable.enabled)
                draw.start(s, e);
        }
        else if (!s.viewOnly) {
            if (s.dropmode.active && undefined === squareOccupied(s, e)) {
                (0, drop_1.drop)(s, e);
            }
            else if (s.dropmode.active &&
                s.movable.playerIndex !== s.turnPlayerIndex &&
                ((_a = squareOccupied(s, e)) === null || _a === void 0 ? void 0 : _a.playerIndex) === s.turnPlayerIndex &&
                !s.onlyDropsVariant) {
                (0, drop_1.drop)(s, e);
            }
            else {
                if (!s.onlyDropsVariant)
                    (0, drop_1.cancelDropMode)(s);
                drag.start(s, e);
            }
        }
    };
}
function dragOrDraw(s, withDrag, withDraw) {
    return e => {
        if (s.drawable.current) {
            if (s.drawable.enabled)
                withDraw(s, e);
        }
        else if (!s.viewOnly)
            withDrag(s, e);
    };
}
function squareOccupied(s, e) {
    const position = (0, util_1.eventPosition)(e);
    const dest = position && (0, board_1.getKeyAtDomPos)(position, s.orientation, s.dom.bounds(), s.dimensions);
    if (dest && s.pieces.get(dest))
        return s.pieces.get(dest);
    return undefined;
}

},{"./board":3,"./drag":6,"./draw":7,"./drop":8,"./util":20}],10:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function explosion(state, keys) {
    state.exploding = { stage: 1, keys };
    state.dom.redraw();
    setTimeout(() => {
        setStage(state, 2);
        setTimeout(() => setStage(state, undefined), 120);
    }, 120);
}
exports.default = explosion;
function setStage(state, stage) {
    if (state.exploding) {
        if (stage)
            state.exploding.stage = stage;
        else
            state.exploding = undefined;
        state.dom.redraw();
    }
}

},{}],11:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.write = exports.read = exports.initial = void 0;
const util_1 = require("./util");
exports.initial = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR';
function roles(letter) {
    return (letter.replace('+', 'p') + '-piece');
}
function letters(role) {
    const letterPart = role.slice(0, role.indexOf('-'));
    return letterPart.length > 1 ? letterPart.replace('p', '+') : letterPart;
}
function read(fen, dimensions, variant) {
    if (fen === 'start')
        fen = exports.initial;
    if (fen.indexOf('[') !== -1)
        fen = fen.slice(0, fen.indexOf('['));
    const pieces = new Map();
    let row = dimensions.height;
    let col = 0;
    let promoted = false;
    let num = 0;
    for (const c of fen) {
        switch (c) {
            case ' ':
                return pieces;
            case '/':
                --row;
                if (row === 0)
                    return pieces;
                col = 0;
                num = 0;
                break;
            case '+':
                promoted = true;
                break;
            case '~': {
                const piece = pieces.get((0, util_1.pos2key)([col, row]));
                if (piece)
                    piece.promoted = true;
                break;
            }
            default: {
                const nb = c.charCodeAt(0);
                if (48 <= nb && nb < 58) {
                    num = num + nb - 48;
                }
                else {
                    col += 1 + num;
                    num = 0;
                    const letter = variant === 'oware' ? c : c.toLowerCase();
                    const playerIndex = (variant === 'oware' && row === 1
                        ? 'p1'
                        : variant === 'oware' && row === 2
                            ? 'p2'
                            : c === letter
                                ? 'p2'
                                : 'p1');
                    const piece = {
                        role: roles(letter),
                        playerIndex: playerIndex,
                    };
                    if (promoted) {
                        piece.role = ('p' + piece.role);
                        piece.promoted = true;
                        promoted = false;
                    }
                    pieces.set((0, util_1.pos2key)([col, row]), piece);
                }
            }
        }
    }
    return pieces;
}
exports.read = read;
function write(pieces, bd, variant) {
    return util_1.invNRanks
        .slice(-bd.height)
        .map(y => util_1.NRanks.slice(0, bd.width)
        .map(x => {
        const piece = pieces.get((0, util_1.pos2key)([x, y]));
        if (piece) {
            const letter = letters(piece.role) + (piece.promoted && letters(piece.role).charAt(0) !== '+' ? '~' : '');
            return piece.playerIndex === 'p1' && variant !== 'oware' ? letter.toUpperCase() : letter;
        }
        else
            return '1';
    })
        .join(''))
        .join('/')
        .replace(/1{2,}/g, s => s.length.toString());
}
exports.write = write;

},{"./util":20}],12:[function(require,module,exports){
module.exports = require('./chessground').Chessground;

},{"./chessground":4}],13:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util = require("./util");
const wholeBoard = (_x, _y) => true;
function rankRange(from, to, playerIndex, bd) {
    const height = bd.height;
    if (from < 1)
        from += height;
    if (to < 1)
        to += height;
    return (_x, y) => {
        if (playerIndex === 'p2')
            y = height - y + 1;
        return from <= y && y <= to;
    };
}
function emptysquares(pieces) {
    return (x, y) => {
        const pos = util.pos2key([x, y]);
        return !pieces.has(pos);
    };
}
function predrop(pieces, piece, bd, variant) {
    const playerIndex = piece.playerIndex;
    const role = piece.role;
    let mobility = wholeBoard;
    switch (variant) {
        case 'crazyhouse':
        case 'shouse':
        case 'capahouse':
        case 'gothhouse':
            switch (role) {
                case 'p-piece':
                    mobility = rankRange(2, -1, playerIndex, bd);
                    break;
            }
            break;
        case 'placement':
            mobility = rankRange(1, 1, playerIndex, bd);
            break;
        case 'sittuyin':
            switch (role) {
                case 'r-piece':
                    mobility = rankRange(1, 1, playerIndex, bd);
                    break;
                default:
                    mobility = (x, y) => {
                        const width = bd.width;
                        const height = bd.height;
                        if (playerIndex === 'p2') {
                            x = width - x + 1;
                            y = height - y + 1;
                        }
                        return y < 3 || (y === 3 && x > 4);
                    };
            }
            break;
        case 'shogi':
        case 'minishogi':
        case 'gorogoro':
            switch (role) {
                case 'p-piece':
                case 'l-piece':
                    mobility = rankRange(1, -1, playerIndex, bd);
                    break;
                case 'n-piece':
                    mobility = rankRange(1, -2, playerIndex, bd);
                    break;
            }
            break;
        case 'kyotoshogi':
        case 'dobutsu':
            mobility = wholeBoard;
            break;
        case 'torishogi':
            switch (role) {
                case 's-piece':
                    mobility = rankRange(1, -1, playerIndex, bd);
                    break;
            }
            break;
        case 'grandhouse':
            switch (role) {
                case 'p-piece':
                    mobility = rankRange(2, 7, playerIndex, bd);
                    break;
            }
            break;
        case 'shogun':
            mobility = rankRange(1, 5, playerIndex, bd);
            break;
        case 'synochess':
            mobility = (_x, y) => y === 5;
            break;
        case 'shinobi':
            mobility = (_x, y) => y <= 4;
            break;
        case 'flipello':
            mobility = emptysquares(pieces);
            break;
        default:
            console.warn('Unknown drop variant', variant);
    }
    return util
        .allKeys(bd)
        .map(util.key2pos)
        .filter(pos => {
        var _a;
        return ((_a = pieces.get(util.pos2key(pos))) === null || _a === void 0 ? void 0 : _a.playerIndex) !== playerIndex && mobility(pos[0], pos[1]);
    })
        .map(util.pos2key);
}
exports.default = predrop;

},{"./util":20}],14:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.premove = exports.loachecker = exports.queen = exports.knight = void 0;
const util = require("./util");
function diff(a, b) {
    return Math.abs(a - b);
}
function pawn(playerIndex) {
    return (x1, y1, x2, y2) => diff(x1, x2) < 2 &&
        (playerIndex === 'p1'
            ?
                y2 === y1 + 1 || (y1 <= 2 && y2 === y1 + 2 && x1 === x2)
            : y2 === y1 - 1 || (y1 >= 7 && y2 === y1 - 2 && x1 === x2));
}
const knight = (x1, y1, x2, y2) => {
    const xd = diff(x1, x2);
    const yd = diff(y1, y2);
    return (xd === 1 && yd === 2) || (xd === 2 && yd === 1);
};
exports.knight = knight;
const bishop = (x1, y1, x2, y2) => {
    return diff(x1, x2) === diff(y1, y2);
};
const rook = (x1, y1, x2, y2) => {
    return x1 === x2 || y1 === y2;
};
const queen = (x1, y1, x2, y2) => {
    return bishop(x1, y1, x2, y2) || rook(x1, y1, x2, y2);
};
exports.queen = queen;
const loachecker = (x1, y1, x2, y2) => {
    return bishop(x1, y1, x2, y2) || rook(x1, y1, x2, y2);
};
exports.loachecker = loachecker;
function king(playerIndex, rookFiles, canCastle) {
    return (x1, y1, x2, y2) => (diff(x1, x2) < 2 && diff(y1, y2) < 2) ||
        (canCastle &&
            y1 === y2 &&
            y1 === (playerIndex === 'p1' ? 1 : 8) &&
            ((x1 === 5 && ((util.containsX(rookFiles, 1) && x2 === 3) || (util.containsX(rookFiles, 8) && x2 === 7))) ||
                util.containsX(rookFiles, x2)));
}
function rookFilesOf(pieces, playerIndex) {
    const backrank = playerIndex === 'p1' ? '1' : '8';
    const files = [];
    for (const [key, piece] of pieces) {
        if (key[1] === backrank && piece && piece.playerIndex === playerIndex && piece.role === 'r-piece') {
            files.push(util.key2pos(key)[0]);
        }
    }
    return files;
}
const kingNoCastling = (x1, y1, x2, y2) => {
    return diff(x1, x2) < 2 && diff(y1, y2) < 2;
};
function king960(playerIndex, rookFiles, canCastle) {
    return (x1, y1, x2, y2) => kingNoCastling(x1, y1, x2, y2) ||
        (canCastle && y1 === y2 && y1 === (playerIndex === 'p1' ? 1 : 8) && util.containsX(rookFiles, x2));
}
function kingCapa(playerIndex, rookFiles, canCastle) {
    return (x1, y1, x2, y2) => kingNoCastling(x1, y1, x2, y2) ||
        (canCastle &&
            y1 === y2 &&
            y1 === (playerIndex === 'p1' ? 1 : 8) &&
            x1 === 6 &&
            ((x2 === 9 && util.containsX(rookFiles, 10)) || (x2 === 3 && util.containsX(rookFiles, 1))));
}
function kingShako(playerIndex, rookFiles, canCastle) {
    return (x1, y1, x2, y2) => kingNoCastling(x1, y1, x2, y2) ||
        (canCastle &&
            y1 === y2 &&
            y1 === (playerIndex === 'p1' ? 2 : 9) &&
            x1 === 6 &&
            ((x2 === 8 && util.containsX(rookFiles, 9)) || (x2 === 4 && util.containsX(rookFiles, 2))));
}
function rookFilesOfShako(pieces, playerIndex) {
    const backrank = playerIndex === 'p1' ? '2' : '9';
    const files = [];
    for (const [key, piece] of pieces) {
        if (key[1] === backrank && piece && piece.playerIndex === playerIndex && piece.role === 'r-piece') {
            files.push(util.key2pos(key)[0]);
        }
    }
    return files;
}
const wazir = (x1, y1, x2, y2) => {
    const xd = diff(x1, x2);
    const yd = diff(y1, y2);
    return (xd === 1 && yd === 0) || (xd === 0 && yd === 1);
};
const ferz = (x1, y1, x2, y2) => diff(x1, x2) === diff(y1, y2) && diff(x1, x2) === 1;
const elephant = (x1, y1, x2, y2) => {
    const xd = diff(x1, x2);
    const yd = diff(y1, y2);
    return xd === yd && xd === 2;
};
const archbishop = (x1, y1, x2, y2) => {
    return bishop(x1, y1, x2, y2) || (0, exports.knight)(x1, y1, x2, y2);
};
const chancellor = (x1, y1, x2, y2) => {
    return rook(x1, y1, x2, y2) || (0, exports.knight)(x1, y1, x2, y2);
};
const amazon = (x1, y1, x2, y2) => {
    return bishop(x1, y1, x2, y2) || rook(x1, y1, x2, y2) || (0, exports.knight)(x1, y1, x2, y2);
};
const centaur = (x1, y1, x2, y2) => {
    return kingNoCastling(x1, y1, x2, y2) || (0, exports.knight)(x1, y1, x2, y2);
};
function grandPawn(playerIndex) {
    return (x1, y1, x2, y2) => diff(x1, x2) < 2 &&
        (playerIndex === 'p1'
            ? y2 === y1 + 1 || (y1 <= 3 && y2 === y1 + 2 && x1 === x2)
            : y2 === y1 - 1 || (y1 >= 8 && y2 === y1 - 2 && x1 === x2));
}
function shogiLance(playerIndex) {
    return (x1, y1, x2, y2) => x2 === x1 && (playerIndex === 'p1' ? y2 > y1 : y2 < y1);
}
function shogiSilver(playerIndex) {
    return (x1, y1, x2, y2) => ferz(x1, y1, x2, y2) || (x1 === x2 && (playerIndex === 'p1' ? y2 === y1 + 1 : y2 === y1 - 1));
}
function shogiGold(playerIndex) {
    return (x1, y1, x2, y2) => wazir(x1, y1, x2, y2) || (diff(x1, x2) < 2 && (playerIndex === 'p1' ? y2 === y1 + 1 : y2 === y1 - 1));
}
function shogiPawn(playerIndex) {
    return (x1, y1, x2, y2) => x2 === x1 && (playerIndex === 'p1' ? y2 === y1 + 1 : y2 === y1 - 1);
}
function shogiKnight(playerIndex) {
    return (x1, y1, x2, y2) => (x2 === x1 - 1 || x2 === x1 + 1) && (playerIndex === 'p1' ? y2 === y1 + 2 : y2 === y1 - 2);
}
const shogiDragon = (x1, y1, x2, y2) => {
    return rook(x1, y1, x2, y2) || ferz(x1, y1, x2, y2);
};
const shogiHorse = (x1, y1, x2, y2) => {
    return bishop(x1, y1, x2, y2) || wazir(x1, y1, x2, y2);
};
function palace(bd, playerIndex) {
    const middleFile = Math.floor((bd.width + 1) / 2);
    const startingRank = playerIndex === 'p1' ? 1 : bd.height - 2;
    return [
        [middleFile - 1, startingRank + 2],
        [middleFile, startingRank + 2],
        [middleFile + 1, startingRank + 2],
        [middleFile - 1, startingRank + 1],
        [middleFile, startingRank + 1],
        [middleFile + 1, startingRank + 1],
        [middleFile - 1, startingRank],
        [middleFile, startingRank],
        [middleFile + 1, startingRank],
    ];
}
function xiangqiPawn(playerIndex) {
    return (x1, y1, x2, y2) => (x2 === x1 && (playerIndex === 'p1' ? y2 === y1 + 1 : y2 === y1 - 1)) ||
        (y2 === y1 && diff(x1, x2) < 2 && (playerIndex === 'p1' ? y1 > 5 : y1 < 6));
}
function minixiangqiPawn(playerIndex) {
    return (x1, y1, x2, y2) => (x2 === x1 && (playerIndex === 'p1' ? y2 === y1 + 1 : y2 === y1 - 1)) || (y2 === y1 && diff(x1, x2) < 2);
}
function xiangqiElephant(playerIndex) {
    return (x1, y1, x2, y2) => elephant(x1, y1, x2, y2) && (playerIndex === 'p1' ? y2 < 6 : y2 > 5);
}
function xiangqiAdvisor(playerIndex, bd) {
    const myPalace = palace(bd, playerIndex);
    return (x1, y1, x2, y2) => ferz(x1, y1, x2, y2) && myPalace.some(point => point[0] === x2 && point[1] === y2);
}
function xiangqiKing(playerIndex, bd) {
    const myPalace = palace(bd, playerIndex);
    return (x1, y1, x2, y2) => wazir(x1, y1, x2, y2) && myPalace.some(point => point[0] === x2 && point[1] === y2);
}
const shakoElephant = (x1, y1, x2, y2) => {
    return diff(x1, x2) === diff(y1, y2) && diff(x1, x2) < 3;
};
const janggiElephant = (x1, y1, x2, y2) => {
    const xd = diff(x1, x2);
    const yd = diff(y1, y2);
    return (xd === 2 && yd === 3) || (xd === 3 && yd === 2);
};
function janggiPawn(playerIndex, bd) {
    const oppPalace = palace(bd, util.opposite(playerIndex));
    return (x1, y1, x2, y2) => {
        const palacePos = oppPalace.findIndex(point => point[0] === x1 && point[1] === y1);
        let additionalMobility;
        switch (palacePos) {
            case 0:
                additionalMobility = (x1, y1, x2, y2) => x2 === x1 + 1 && playerIndex === 'p2' && y2 === y1 - 1;
                break;
            case 2:
                additionalMobility = (x1, y1, x2, y2) => x2 === x1 - 1 && playerIndex === 'p2' && y2 === y1 - 1;
                break;
            case 4:
                additionalMobility = (x1, y1, x2, y2) => diff(x1, x2) === 1 && (playerIndex === 'p1' ? y2 === y1 + 1 : y2 === y1 - 1);
                break;
            case 6:
                additionalMobility = (x1, y1, x2, y2) => x2 === x1 + 1 && playerIndex === 'p1' && y2 === y1 + 1;
                break;
            case 8:
                additionalMobility = (x1, y1, x2, y2) => x2 === x1 - 1 && playerIndex === 'p1' && y2 === y1 + 1;
                break;
            default:
                additionalMobility = () => false;
        }
        return ((x2 === x1 && (playerIndex === 'p1' ? y2 === y1 + 1 : y2 === y1 - 1)) ||
            (y2 === y1 && diff(x1, x2) < 2) ||
            additionalMobility(x1, y1, x2, y2));
    };
}
function janggiRook(bd) {
    const wPalace = palace(bd, 'p1');
    const bPalace = palace(bd, 'p2');
    return (x1, y1, x2, y2) => {
        let additionalMobility;
        const wPalacePos = wPalace.findIndex(point => point[0] === x1 && point[1] === y1);
        const bPalacePos = bPalace.findIndex(point => point[0] === x1 && point[1] === y1);
        const palacePos = wPalacePos !== -1 ? wPalacePos : bPalacePos;
        const xd = diff(x1, x2);
        const yd = diff(y1, y2);
        switch (palacePos) {
            case 0:
                additionalMobility = (x1, y1, x2, y2) => xd === yd && x2 > x1 && x2 <= x1 + 2 && y2 < y1 && y2 >= y1 - 2;
                break;
            case 2:
                additionalMobility = (x1, y1, x2, y2) => xd === yd && x2 < x1 && x2 >= x1 - 2 && y2 < y1 && y2 >= y1 - 2;
                break;
            case 4:
                additionalMobility = ferz;
                break;
            case 6:
                additionalMobility = (x1, y1, x2, y2) => xd === yd && x2 > x1 && x2 <= x1 + 2 && y2 > y1 && y2 <= y1 + 2;
                break;
            case 8:
                additionalMobility = (x1, y1, x2, y2) => xd === yd && x2 < x1 && x2 >= x1 - 2 && y2 > y1 && y2 <= y1 + 2;
                break;
            default:
                additionalMobility = () => false;
        }
        return rook(x1, y1, x2, y2) || additionalMobility(x1, y1, x2, y2);
    };
}
function janggiKing(playerIndex, bd) {
    const myPalace = palace(bd, playerIndex);
    return (x1, y1, x2, y2) => {
        const palacePos = myPalace.findIndex(point => point[0] === x1 && point[1] === y1);
        let additionalMobility;
        switch (palacePos) {
            case 0:
                additionalMobility = (x1, y1, x2, y2) => x2 === x1 + 1 && y2 === y1 - 1;
                break;
            case 2:
                additionalMobility = (x1, y1, x2, y2) => x2 === x1 - 1 && y2 === y1 - 1;
                break;
            case 4:
                additionalMobility = ferz;
                break;
            case 6:
                additionalMobility = (x1, y1, x2, y2) => x2 === x1 + 1 && y2 === y1 + 1;
                break;
            case 8:
                additionalMobility = (x1, y1, x2, y2) => x2 === x1 - 1 && y2 === y1 + 1;
                break;
            default:
                additionalMobility = () => false;
        }
        return ((wazir(x1, y1, x2, y2) || additionalMobility(x1, y1, x2, y2)) &&
            myPalace.some(point => point[0] === x2 && point[1] === y2));
    };
}
const musketeerLeopard = (x1, y1, x2, y2) => {
    const xd = diff(x1, x2);
    const yd = diff(y1, y2);
    return (xd === 1 || xd === 2) && (yd === 1 || yd === 2);
};
const musketeerHawk = (x1, y1, x2, y2) => {
    const xd = diff(x1, x2);
    const yd = diff(y1, y2);
    return ((xd === 0 && (yd === 2 || yd === 3)) ||
        (yd === 0 && (xd === 2 || xd === 3)) ||
        (xd === yd && (xd === 2 || xd === 3)));
};
const musketeerElephant = (x1, y1, x2, y2) => {
    const xd = diff(x1, x2);
    const yd = diff(y1, y2);
    return xd === 1 || yd === 1 || (xd === 2 && (yd === 0 || yd === 2)) || (xd === 0 && yd === 2);
};
const musketeerCannon = (x1, y1, x2, y2) => {
    const xd = diff(x1, x2);
    const yd = diff(y1, y2);
    return xd < 3 && (yd < 2 || (yd === 2 && xd === 0));
};
const musketeerUnicorn = (x1, y1, x2, y2) => {
    const xd = diff(x1, x2);
    const yd = diff(y1, y2);
    return (0, exports.knight)(x1, y1, x2, y2) || (xd === 1 && yd === 3) || (xd === 3 && yd === 1);
};
const musketeerDragon = (x1, y1, x2, y2) => {
    return (0, exports.knight)(x1, y1, x2, y2) || (0, exports.queen)(x1, y1, x2, y2);
};
const musketeerFortress = (x1, y1, x2, y2) => {
    const xd = diff(x1, x2);
    const yd = diff(y1, y2);
    return (xd === yd && xd < 4) || (yd === 0 && xd === 2) || (yd === 2 && xd < 2);
};
const musketeerSpider = (x1, y1, x2, y2) => {
    const xd = diff(x1, x2);
    const yd = diff(y1, y2);
    return xd < 3 && yd < 3 && !(xd === 1 && yd === 0) && !(xd === 0 && yd === 1);
};
function toriGoose(playerIndex) {
    return (x1, y1, x2, y2) => {
        const xd = diff(x1, x2);
        return playerIndex === 'p1'
            ? (xd === 2 && y2 === y1 + 2) || (xd === 0 && y2 === y1 - 2)
            : (xd === 2 && y2 === y1 - 2) || (xd === 0 && y2 === y1 + 2);
    };
}
function toriLeftQuail(playerIndex) {
    return (x1, y1, x2, y2) => {
        const xd = diff(x1, x2);
        const yd = diff(y1, y2);
        return playerIndex === 'p1'
            ? (x2 === x1 && y2 > y1) || (xd === yd && x2 > x1 && y2 < y1) || (x2 === x1 - 1 && y2 === y1 - 1)
            : (x2 === x1 && y2 < y1) || (xd === yd && x2 < x1 && y2 > y1) || (x2 === x1 + 1 && y2 === y1 + 1);
    };
}
function toriRightQuail(playerIndex) {
    return (x1, y1, x2, y2) => {
        const xd = diff(x1, x2);
        const yd = diff(y1, y2);
        return playerIndex === 'p1'
            ? (x2 === x1 && y2 > y1) || (xd === yd && x2 < x1 && y2 < y1) || (x2 === x1 + 1 && y2 === y1 - 1)
            : (x2 === x1 && y2 < y1) || (xd === yd && x2 > x1 && y2 > y1) || (x2 === x1 - 1 && y2 === y1 + 1);
    };
}
function toriPheasant(playerIndex) {
    return (x1, y1, x2, y2) => {
        const xd = diff(x1, x2);
        return playerIndex === 'p1'
            ? (x2 === x1 && y2 === y1 + 2) || (xd === 1 && y2 === y1 - 1)
            : (x2 === x1 && y2 === y1 - 2) || (xd === 1 && y2 === y1 + 1);
    };
}
const toriCrane = (x1, y1, x2, y2) => {
    return kingNoCastling(x1, y1, x2, y2) && y2 !== y1;
};
function toriFalcon(playerIndex) {
    return (x1, y1, x2, y2) => {
        return playerIndex === 'p1'
            ? kingNoCastling(x1, y1, x2, y2) && !(x2 === x1 && y2 === y1 - 1)
            : kingNoCastling(x1, y1, x2, y2) && !(x2 === x1 && y2 === y1 + 1);
    };
}
function toriEagle(playerIndex) {
    return (x1, y1, x2, y2) => {
        const xd = diff(x1, x2);
        const yd = diff(y1, y2);
        return playerIndex === 'p1'
            ? kingNoCastling(x1, y1, x2, y2) || (xd === yd && (y2 > y1 || (y2 < y1 && yd <= 2))) || (x2 === x1 && y2 < y1)
            : kingNoCastling(x1, y1, x2, y2) || (xd === yd && (y2 < y1 || (y2 > y1 && yd <= 2))) || (x2 === x1 && y2 > y1);
    };
}
function premove(pieces, key, canCastle, bd, variant, chess960) {
    const piece = pieces.get(key);
    const role = piece.role;
    const playerIndex = piece.playerIndex;
    if (!piece)
        return [];
    const pos = util.key2pos(key);
    let mobility;
    switch (variant) {
        case 'xiangqi':
        case 'manchu':
            switch (role) {
                case 'p-piece':
                    mobility = xiangqiPawn(playerIndex);
                    break;
                case 'c-piece':
                case 'r-piece':
                    mobility = rook;
                    break;
                case 'n-piece':
                    mobility = exports.knight;
                    break;
                case 'b-piece':
                    mobility = xiangqiElephant(playerIndex);
                    break;
                case 'a-piece':
                    mobility = xiangqiAdvisor(playerIndex, bd);
                    break;
                case 'k-piece':
                    mobility = xiangqiKing(playerIndex, bd);
                    break;
                case 'm-piece':
                    mobility = chancellor;
                    break;
            }
            break;
        case 'janggi':
            switch (piece.role) {
                case 'p-piece':
                    mobility = janggiPawn(playerIndex, bd);
                    break;
                case 'c-piece':
                case 'r-piece':
                    mobility = janggiRook(bd);
                    break;
                case 'n-piece':
                    mobility = exports.knight;
                    break;
                case 'b-piece':
                    mobility = janggiElephant;
                    break;
                case 'a-piece':
                case 'k-piece':
                    mobility = janggiKing(playerIndex, bd);
                    break;
            }
            break;
        case 'minixiangqi':
            {
                switch (piece.role) {
                    case 'p-piece':
                        mobility = minixiangqiPawn(playerIndex);
                        break;
                    case 'c-piece':
                    case 'r-piece':
                        mobility = rook;
                        break;
                    case 'n-piece':
                        mobility = exports.knight;
                        break;
                    case 'k-piece':
                        mobility = xiangqiKing(playerIndex, bd);
                        break;
                }
            }
            break;
        case 'shogi':
        case 'minishogi':
        case 'gorogoro':
            switch (piece.role) {
                case 'p-piece':
                    mobility = shogiPawn(playerIndex);
                    break;
                case 'l-piece':
                    mobility = shogiLance(playerIndex);
                    break;
                case 'n-piece':
                    mobility = shogiKnight(playerIndex);
                    break;
                case 'k-piece':
                    mobility = kingNoCastling;
                    break;
                case 's-piece':
                    mobility = shogiSilver(playerIndex);
                    break;
                case 'pp-piece':
                case 'pl-piece':
                case 'pn-piece':
                case 'ps-piece':
                case 'g-piece':
                    mobility = shogiGold(playerIndex);
                    break;
                case 'b-piece':
                    mobility = bishop;
                    break;
                case 'r-piece':
                    mobility = rook;
                    break;
                case 'pr-piece':
                    mobility = shogiDragon;
                    break;
                case 'pb-piece':
                    mobility = shogiHorse;
                    break;
            }
            break;
        case 'kyotoshogi':
            switch (piece.role) {
                case 'l-piece':
                    mobility = shogiLance(playerIndex);
                    break;
                case 'pl-piece':
                    mobility = shogiGold(playerIndex);
                    break;
                case 's-piece':
                    mobility = shogiSilver(playerIndex);
                    break;
                case 'ps-piece':
                    mobility = bishop;
                    break;
                case 'n-piece':
                    mobility = shogiKnight(playerIndex);
                    break;
                case 'pn-piece':
                    mobility = shogiGold(playerIndex);
                    break;
                case 'p-piece':
                    mobility = shogiPawn(playerIndex);
                    break;
                case 'pp-piece':
                    mobility = rook;
                    break;
                case 'k-piece':
                    mobility = kingNoCastling;
                    break;
            }
            break;
        case 'dobutsu':
            switch (piece.role) {
                case 'c-piece':
                    mobility = shogiPawn(playerIndex);
                    break;
                case 'e-piece':
                    mobility = ferz;
                    break;
                case 'g-piece':
                    mobility = wazir;
                    break;
                case 'l-piece':
                    mobility = kingNoCastling;
                    break;
                case 'pc-piece':
                    mobility = shogiGold(playerIndex);
                    break;
            }
            break;
        case 'torishogi':
            switch (role) {
                case 's-piece':
                    mobility = shogiPawn(playerIndex);
                    break;
                case 'ps-piece':
                    mobility = toriGoose(playerIndex);
                    break;
                case 'l-piece':
                    mobility = toriLeftQuail(playerIndex);
                    break;
                case 'r-piece':
                    mobility = toriRightQuail(playerIndex);
                    break;
                case 'p-piece':
                    mobility = toriPheasant(playerIndex);
                    break;
                case 'c-piece':
                    mobility = toriCrane;
                    break;
                case 'f-piece':
                    mobility = toriFalcon(playerIndex);
                    break;
                case 'pf-piece':
                    mobility = toriEagle(playerIndex);
                    break;
                case 'k-piece':
                    mobility = kingNoCastling;
                    break;
            }
            break;
        case 'makruk':
        case 'makpong':
        case 'sittuyin':
        case 'cambodian':
            switch (role) {
                case 'p-piece':
                    mobility = pawn(playerIndex);
                    break;
                case 'r-piece':
                    mobility = rook;
                    break;
                case 'n-piece':
                    mobility = exports.knight;
                    break;
                case 's-piece':
                    mobility = shogiSilver(playerIndex);
                    break;
                case 'f-piece':
                case 'm-piece':
                    mobility = ferz;
                    break;
                case 'k-piece':
                    mobility = kingNoCastling;
                    break;
            }
            break;
        case 'grand':
        case 'grandhouse':
            switch (role) {
                case 'p-piece':
                    mobility = grandPawn(playerIndex);
                    break;
                case 'r-piece':
                    mobility = rook;
                    break;
                case 'n-piece':
                    mobility = exports.knight;
                    break;
                case 'b-piece':
                    mobility = bishop;
                    break;
                case 'q-piece':
                    mobility = exports.queen;
                    break;
                case 'c-piece':
                    mobility = chancellor;
                    break;
                case 'a-piece':
                    mobility = archbishop;
                    break;
                case 'k-piece':
                    mobility = kingNoCastling;
                    break;
            }
            break;
        case 'shako':
            switch (role) {
                case 'p-piece':
                    mobility = grandPawn(playerIndex);
                    break;
                case 'c-piece':
                case 'r-piece':
                    mobility = rook;
                    break;
                case 'n-piece':
                    mobility = exports.knight;
                    break;
                case 'b-piece':
                    mobility = bishop;
                    break;
                case 'q-piece':
                    mobility = exports.queen;
                    break;
                case 'e-piece':
                    mobility = shakoElephant;
                    break;
                case 'k-piece':
                    mobility = kingShako(playerIndex, rookFilesOfShako(pieces, playerIndex), canCastle);
                    break;
            }
            break;
        case 'shogun':
            switch (role) {
                case 'p-piece':
                    mobility = pawn(playerIndex);
                    break;
                case 'pp-piece':
                    mobility = kingNoCastling;
                    break;
                case 'r-piece':
                    mobility = rook;
                    break;
                case 'pr-piece':
                    mobility = chancellor;
                    break;
                case 'n-piece':
                    mobility = exports.knight;
                    break;
                case 'pn-piece':
                    mobility = centaur;
                    break;
                case 'b-piece':
                    mobility = bishop;
                    break;
                case 'pb-piece':
                    mobility = archbishop;
                    break;
                case 'f-piece':
                    mobility = ferz;
                    break;
                case 'pf-piece':
                    mobility = exports.queen;
                    break;
                case 'k-piece':
                    mobility = king(playerIndex, rookFilesOf(pieces, playerIndex), canCastle);
                    break;
            }
            break;
        case 'orda':
        case 'ordamirror':
            switch (role) {
                case 'p-piece':
                    mobility = pawn(playerIndex);
                    break;
                case 'r-piece':
                    mobility = rook;
                    break;
                case 'n-piece':
                    mobility = exports.knight;
                    break;
                case 'b-piece':
                    mobility = bishop;
                    break;
                case 'q-piece':
                    mobility = exports.queen;
                    break;
                case 'l-piece':
                    mobility = chancellor;
                    break;
                case 'h-piece':
                    mobility = centaur;
                    break;
                case 'a-piece':
                    mobility = archbishop;
                    break;
                case 'y-piece':
                    mobility = shogiSilver(playerIndex);
                    break;
                case 'f-piece':
                    mobility = amazon;
                    break;
                case 'k-piece':
                    mobility = king(playerIndex, rookFilesOf(pieces, playerIndex), canCastle);
                    break;
            }
            break;
        case 'synochess':
            switch (role) {
                case 'p-piece':
                    mobility = pawn(playerIndex);
                    break;
                case 'c-piece':
                case 'r-piece':
                    mobility = rook;
                    break;
                case 'n-piece':
                    mobility = exports.knight;
                    break;
                case 'b-piece':
                    mobility = bishop;
                    break;
                case 'q-piece':
                    mobility = exports.queen;
                    break;
                case 's-piece':
                    mobility = minixiangqiPawn(playerIndex);
                    break;
                case 'e-piece':
                    mobility = shakoElephant;
                    break;
                case 'a-piece':
                    mobility = kingNoCastling;
                    break;
                case 'k-piece':
                    mobility = king(playerIndex, rookFilesOf(pieces, playerIndex), canCastle && playerIndex === 'p1');
                    break;
            }
            break;
        case 'musketeer':
            switch (role) {
                case 'p-piece':
                    mobility = pawn(playerIndex);
                    break;
                case 'r-piece':
                    mobility = rook;
                    break;
                case 'n-piece':
                    mobility = exports.knight;
                    break;
                case 'b-piece':
                    mobility = bishop;
                    break;
                case 'q-piece':
                    mobility = exports.queen;
                    break;
                case 'l-piece':
                    mobility = musketeerLeopard;
                    break;
                case 'o-piece':
                    mobility = musketeerCannon;
                    break;
                case 'u-piece':
                    mobility = musketeerUnicorn;
                    break;
                case 'd-piece':
                    mobility = musketeerDragon;
                    break;
                case 'c-piece':
                    mobility = chancellor;
                    break;
                case 'a-piece':
                    mobility = archbishop;
                    break;
                case 'e-piece':
                    mobility = musketeerElephant;
                    break;
                case 'h-piece':
                    mobility = musketeerHawk;
                    break;
                case 'f-piece':
                    mobility = musketeerFortress;
                    break;
                case 's-piece':
                    mobility = musketeerSpider;
                    break;
                case 'k-piece':
                    mobility = king(playerIndex, rookFilesOf(pieces, playerIndex), canCastle);
                    break;
            }
            break;
        case 'hoppelpoppel':
            switch (role) {
                case 'p-piece':
                    mobility = pawn(playerIndex);
                    break;
                case 'r-piece':
                    mobility = rook;
                    break;
                case 'n-piece':
                case 'b-piece':
                    mobility = archbishop;
                    break;
                case 'q-piece':
                    mobility = exports.queen;
                    break;
                case 'k-piece':
                    mobility = king(playerIndex, rookFilesOf(pieces, playerIndex), canCastle);
                    break;
            }
            break;
        case 'shinobi':
            switch (role) {
                case 'p-piece':
                    mobility = pawn(playerIndex);
                    break;
                case 'pl-piece':
                case 'r-piece':
                    mobility = rook;
                    break;
                case 'ph-piece':
                case 'n-piece':
                    mobility = exports.knight;
                    break;
                case 'pm-piece':
                case 'b-piece':
                    mobility = bishop;
                    break;
                case 'q-piece':
                    mobility = exports.queen;
                    break;
                case 'pp-piece':
                case 'c-piece':
                    mobility = kingNoCastling;
                    break;
                case 'l-piece':
                    mobility = shogiLance(playerIndex);
                    break;
                case 'h-piece':
                    mobility = shogiKnight(playerIndex);
                    break;
                case 'm-piece':
                    mobility = ferz;
                    break;
                case 'd-piece':
                    mobility = shogiDragon;
                    break;
                case 'j-piece':
                    mobility = archbishop;
                    break;
                case 'k-piece':
                    mobility = king(playerIndex, rookFilesOf(pieces, playerIndex), canCastle);
                    break;
            }
            break;
        case 'empire':
            switch (role) {
                case 'p-piece':
                    mobility = pawn(playerIndex);
                    break;
                case 's-piece':
                    mobility = minixiangqiPawn(playerIndex);
                    break;
                case 'r-piece':
                    mobility = rook;
                    break;
                case 'n-piece':
                    mobility = exports.knight;
                    break;
                case 'b-piece':
                    mobility = bishop;
                    break;
                case 'd-piece':
                case 't-piece':
                case 'c-piece':
                case 'q-piece':
                    mobility = exports.queen;
                    break;
                case 'e-piece':
                    mobility = amazon;
                    break;
                case 'k-piece':
                    mobility = king(playerIndex, rookFilesOf(pieces, playerIndex), canCastle);
                    break;
            }
            break;
        case 'capablanca':
        case 'capahouse':
            switch (role) {
                case 'p-piece':
                    mobility = pawn(playerIndex);
                    break;
                case 'r-piece':
                    mobility = rook;
                    break;
                case 'n-piece':
                    mobility = exports.knight;
                    break;
                case 'b-piece':
                    mobility = bishop;
                    break;
                case 'q-piece':
                    mobility = exports.queen;
                    break;
                case 'c-piece':
                    mobility = chancellor;
                    break;
                case 'a-piece':
                    mobility = archbishop;
                    break;
                case 'k-piece':
                    mobility = chess960
                        ? king960(playerIndex, rookFilesOf(pieces, playerIndex), canCastle)
                        : kingCapa(playerIndex, rookFilesOf(pieces, playerIndex), canCastle);
                    break;
            }
            break;
        default:
            switch (role) {
                case 'p-piece':
                    mobility = pawn(playerIndex);
                    break;
                case 'r-piece':
                    mobility = rook;
                    break;
                case 'n-piece':
                    mobility = exports.knight;
                    break;
                case 'b-piece':
                    mobility = bishop;
                    break;
                case 'q-piece':
                    mobility = exports.queen;
                    break;
                case 'e-piece':
                case 'c-piece':
                    mobility = chancellor;
                    break;
                case 'h-piece':
                case 'a-piece':
                    mobility = archbishop;
                    break;
                case 'k-piece':
                    mobility = chess960
                        ? king960(playerIndex, rookFilesOf(pieces, playerIndex), canCastle)
                        : king(playerIndex, rookFilesOf(pieces, playerIndex), canCastle);
                    break;
                case 'l-piece':
                    mobility = exports.loachecker;
                    break;
            }
    }
    return util
        .allKeys(bd)
        .map(util.key2pos)
        .filter(pos2 => {
        return (pos[0] !== pos2[0] || pos[1] !== pos2[1]) && mobility(pos[0], pos[1], pos2[0], pos2[1]);
    })
        .map(util.pos2key);
}
exports.premove = premove;

},{"./util":20}],15:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateBounds = exports.render = void 0;
const util_1 = require("./util");
const board_1 = require("./board");
const T = require("./transformations");
function render(s) {
    const orientation = s.orientation, asP1 = (0, board_1.p1Pov)(s), posToTranslate = s.dom.relative ? util_1.posToTranslateRel : (0, util_1.posToTranslateAbs)(s.dom.bounds(), s.dimensions), translate = s.dom.relative ? util_1.translateRel : util_1.translateAbs, boardEl = s.dom.elements.board, pieces = s.pieces, curAnim = s.animation.current, anims = curAnim ? curAnim.plan.anims : new Map(), fadings = curAnim ? curAnim.plan.fadings : new Map(), curDrag = s.draggable.current, squares = computeSquareClasses(s), samePieces = new Set(), sameSquares = new Set(), movedPieces = new Map(), movedSquares = new Map();
    let k, el, pieceAtKey, elPieceName, anim, fading, pMvdset, pMvd, sMvdset, sMvd;
    el = boardEl.firstChild;
    while (el) {
        k = el.cgKey;
        if (isPieceNode(el)) {
            pieceAtKey = pieces.get(k);
            anim = anims.get(k);
            fading = fadings.get(k);
            elPieceName = el.cgPiece;
            if (el.cgDragging && (!curDrag || curDrag.orig !== k)) {
                el.classList.remove('dragging');
                translate(el, posToTranslate((0, util_1.key2pos)(k), orientation, s.dimensions));
                el.cgDragging = false;
            }
            if (!fading && el.cgFading) {
                el.cgFading = false;
                el.classList.remove('fading');
            }
            if (pieceAtKey) {
                if (anim && el.cgAnimating && elPieceName === pieceNameOf(pieceAtKey, s.myPlayerIndex)) {
                    const pos = (0, util_1.key2pos)(k);
                    pos[0] += anim[2];
                    pos[1] += anim[3];
                    el.classList.add('anim');
                    translate(el, posToTranslate(pos, orientation, s.dimensions));
                }
                else if (el.cgAnimating) {
                    el.cgAnimating = false;
                    el.classList.remove('anim');
                    translate(el, posToTranslate((0, util_1.key2pos)(k), orientation, s.dimensions));
                    if (s.addPieceZIndex)
                        el.style.zIndex = posZIndex((0, util_1.key2pos)(k), orientation, asP1, s.dimensions);
                }
                if (elPieceName === pieceNameOf(pieceAtKey, s.myPlayerIndex) && (!fading || !el.cgFading)) {
                    samePieces.add(k);
                }
                else {
                    if (fading && elPieceName === pieceNameOf(fading, s.myPlayerIndex)) {
                        el.classList.add('fading');
                        el.cgFading = true;
                    }
                    else {
                        appendValue(movedPieces, elPieceName, el);
                    }
                }
            }
            else {
                appendValue(movedPieces, elPieceName, el);
            }
        }
        else if (isSquareNode(el)) {
            const cn = el.className;
            if (squares.get(k) === cn)
                sameSquares.add(k);
            else if (movedSquares.has(cn))
                appendValue(movedSquares, cn, el);
            else
                movedSquares.set(cn, [el]);
        }
        el = el.nextSibling;
    }
    for (const [sk, className] of squares) {
        if (!sameSquares.has(sk)) {
            sMvdset = movedSquares.get(className);
            sMvd = sMvdset && sMvdset.pop();
            const translation = posToTranslate((0, util_1.key2pos)(sk), orientation, s.dimensions);
            if (sMvd) {
                sMvd.cgKey = sk;
                translate(sMvd, translation);
            }
            else {
                const squareNode = (0, util_1.createEl)('square', className);
                squareNode.cgKey = sk;
                translate(squareNode, translation);
                boardEl.insertBefore(squareNode, boardEl.firstChild);
            }
        }
    }
    for (const [k, p] of pieces) {
        anim = anims.get(k);
        if (!samePieces.has(k)) {
            pMvdset = movedPieces.get(pieceNameOf(p, s.myPlayerIndex));
            pMvd = pMvdset && pMvdset.pop();
            if (pMvd) {
                pMvd.cgKey = k;
                if (pMvd.cgFading) {
                    pMvd.classList.remove('fading');
                    pMvd.cgFading = false;
                }
                const pos = (0, util_1.key2pos)(k);
                if (s.addPieceZIndex)
                    pMvd.style.zIndex = posZIndex(pos, orientation, asP1, s.dimensions);
                if (anim) {
                    pMvd.cgAnimating = true;
                    pMvd.classList.add('anim');
                    pos[0] += anim[2];
                    pos[1] += anim[3];
                }
                translate(pMvd, posToTranslate(pos, orientation, s.dimensions));
            }
            else {
                const pieceName = pieceNameOf(p, s.myPlayerIndex), pieceNode = (0, util_1.createEl)('piece', pieceName), pos = (0, util_1.key2pos)(k);
                pieceNode.cgPiece = pieceName;
                pieceNode.cgKey = k;
                if (anim) {
                    pieceNode.cgAnimating = true;
                    pos[0] += anim[2];
                    pos[1] += anim[3];
                }
                translate(pieceNode, posToTranslate(pos, orientation, s.dimensions));
                if (s.addPieceZIndex)
                    pieceNode.style.zIndex = posZIndex(pos, orientation, asP1, s.dimensions);
                boardEl.appendChild(pieceNode);
            }
        }
    }
    for (const nodes of movedPieces.values())
        removeNodes(s, nodes);
    for (const nodes of movedSquares.values())
        removeNodes(s, nodes);
}
exports.render = render;
function updateBounds(s) {
    if (s.dom.relative)
        return;
    const orientation = s.orientation, posToTranslate = (0, util_1.posToTranslateAbs)(s.dom.bounds(), s.dimensions);
    let el = s.dom.elements.board.firstChild;
    while (el) {
        if ((isPieceNode(el) && !el.cgAnimating) || isSquareNode(el)) {
            (0, util_1.translateAbs)(el, posToTranslate((0, util_1.key2pos)(el.cgKey), orientation));
        }
        el = el.nextSibling;
    }
}
exports.updateBounds = updateBounds;
function isPieceNode(el) {
    return el.tagName === 'PIECE';
}
function isSquareNode(el) {
    return el.tagName === 'SQUARE';
}
function removeNodes(s, nodes) {
    for (const node of nodes)
        s.dom.elements.board.removeChild(node);
}
function posZIndex(pos, orientation, asP1, bd) {
    pos = T.mapToP1[orientation](pos, bd);
    let z = 2 + (pos[1] - 1) * bd.height + (bd.width - pos[0]);
    if (asP1)
        z = 67 - z;
    return z + '';
}
function pieceNameOf(piece, myPlayerIndex) {
    const promoted = piece.promoted ? 'promoted ' : '';
    const side = piece.playerIndex === myPlayerIndex ? 'ally' : 'enemy';
    return `${piece.playerIndex} ${promoted}${piece.role} ${side}`;
}
function computeSquareClasses(s) {
    var _a, _b, _c, _d;
    const squares = new Map();
    if (s.lastMove && s.highlight.lastMove)
        for (const k of s.lastMove) {
            if (k !== 'a0') {
                addSquare(squares, k, 'last-move');
            }
        }
    if (s.check && s.highlight.check)
        addSquare(squares, s.check, 'check');
    if (s.selected) {
        addSquare(squares, s.selected, 'selected');
        if (s.movable.showDests) {
            const dests = (_a = s.movable.dests) === null || _a === void 0 ? void 0 : _a.get(s.selected);
            if (dests)
                for (const k of dests) {
                    addSquare(squares, k, 'move-dest' + (s.pieces.has(k) ? ' oc' : ''));
                }
            const pDests = s.premovable.dests;
            if (pDests)
                for (const k of pDests) {
                    addSquare(squares, k, 'premove-dest' + (s.pieces.has(k) ? ' oc' : ''));
                }
        }
    }
    else if (s.dropmode.active || ((_b = s.draggable.current) === null || _b === void 0 ? void 0 : _b.orig) === 'a0') {
        const piece = s.dropmode.active ? s.dropmode.piece : (_c = s.draggable.current) === null || _c === void 0 ? void 0 : _c.piece;
        if (piece) {
            if (s.dropmode.showDropDests) {
                const dests = (_d = s.dropmode.dropDests) === null || _d === void 0 ? void 0 : _d.get(piece.role);
                if (dests)
                    for (const k of dests) {
                        addSquare(squares, k, 'move-dest');
                    }
            }
            if (s.predroppable.showDropDests) {
                const pDests = s.predroppable.dropDests;
                if (pDests)
                    for (const k of pDests) {
                        addSquare(squares, k, 'premove-dest' + (s.pieces.has(k) ? ' oc' : ''));
                    }
            }
        }
    }
    const premove = s.premovable.current;
    if (premove)
        for (const k of premove)
            addSquare(squares, k, 'current-premove');
    else if (s.predroppable.current)
        addSquare(squares, s.predroppable.current.key, 'current-premove');
    const o = s.exploding;
    if (o)
        for (const k of o.keys)
            addSquare(squares, k, 'exploding' + o.stage);
    return squares;
}
function addSquare(squares, key, klass) {
    const classes = squares.get(key);
    if (classes)
        squares.set(key, `${classes} ${klass}`);
    else
        squares.set(key, klass);
}
function appendValue(map, key, value) {
    const arr = map.get(key);
    if (arr)
        arr.push(value);
    else
        map.set(key, [value]);
}

},{"./board":3,"./transformations":18,"./util":20}],16:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaults = void 0;
const fen = require("./fen");
const util_1 = require("./util");
function defaults() {
    return {
        pieces: fen.read(fen.initial, { width: 8, height: 8 }, 'chess'),
        orientation: 'p1',
        myPlayerIndex: 'p1',
        startPlayerIndex: 'p1',
        turnPlayerIndex: 'p1',
        coordinates: true,
        autoCastle: true,
        viewOnly: false,
        disableContextMenu: false,
        resizable: true,
        addPieceZIndex: false,
        pieceKey: false,
        highlight: {
            lastMove: true,
            check: true,
        },
        animation: {
            enabled: true,
            duration: 200,
        },
        movable: {
            free: true,
            playerIndex: 'both',
            showDests: true,
            events: {},
            rookCastle: true,
        },
        premovable: {
            enabled: true,
            showDests: true,
            castle: true,
            events: {},
        },
        predroppable: {
            enabled: false,
            showDropDests: true,
            events: {},
        },
        draggable: {
            enabled: true,
            distance: 3,
            autoDistance: true,
            centerPiece: true,
            showGhost: true,
            deleteOnDropOff: false,
        },
        dropmode: {
            active: false,
            showDropDests: true,
        },
        selectable: {
            enabled: true,
        },
        stats: {
            dragged: !('ontouchstart' in window),
        },
        events: {},
        drawable: {
            enabled: true,
            visible: true,
            defaultSnapToValidMove: true,
            eraseOnClick: true,
            shapes: [],
            autoShapes: [],
            brushes: {
                green: { key: 'g', color: '#15781B', opacity: 1, lineWidth: 10 },
                red: { key: 'r', color: '#882020', opacity: 1, lineWidth: 10 },
                blue: { key: 'b', color: '#003088', opacity: 1, lineWidth: 10 },
                yellow: { key: 'y', color: '#e68f00', opacity: 1, lineWidth: 10 },
                paleBlue: { key: 'pb', color: '#003088', opacity: 0.4, lineWidth: 15 },
                paleGreen: { key: 'pg', color: '#15781B', opacity: 0.4, lineWidth: 15 },
                paleRed: { key: 'pr', color: '#882020', opacity: 0.4, lineWidth: 15 },
                paleGrey: {
                    key: 'pgr',
                    color: '#4a4a4a',
                    opacity: 0.35,
                    lineWidth: 15,
                },
            },
            pieces: {
                baseUrl: 'https://playstrategy.org/assets/piece/cburnett/',
            },
            prevSvgHash: '',
        },
        hold: (0, util_1.timer)(),
        dimensions: { width: 8, height: 8 },
        variant: 'chess',
        chess960: false,
        notation: 0,
        onlyDropsVariant: false,
    };
}
exports.defaults = defaults;

},{"./fen":11,"./util":20}],17:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setAttributes = exports.renderSvg = exports.createElement = void 0;
const util_1 = require("./util");
const T = require("./transformations");
function createElement(tagName) {
    return document.createElementNS('http://www.w3.org/2000/svg', tagName);
}
exports.createElement = createElement;
function renderSvg(state, svg, customSvg) {
    const d = state.drawable, curD = d.current, cur = curD && curD.mouseSq ? curD : undefined, arrowDests = new Map(), bounds = state.dom.bounds();
    for (const s of d.shapes.concat(d.autoShapes).concat(cur ? [cur] : [])) {
        if (s.dest)
            arrowDests.set(s.dest, (arrowDests.get(s.dest) || 0) + 1);
    }
    const shapes = d.shapes.concat(d.autoShapes).map((s) => {
        return {
            shape: s,
            current: false,
            hash: shapeHash(s, arrowDests, false, bounds),
        };
    });
    if (cur)
        shapes.push({
            shape: cur,
            current: true,
            hash: shapeHash(cur, arrowDests, true, bounds),
        });
    const fullHash = shapes.map(sc => sc.hash).join(';');
    if (fullHash === state.drawable.prevSvgHash)
        return;
    state.drawable.prevSvgHash = fullHash;
    const defsEl = svg.querySelector('defs');
    const shapesEl = svg.querySelector('g');
    const customSvgsEl = customSvg.querySelector('g');
    syncDefs(d, shapes, defsEl);
    syncShapes(state, shapes.filter(s => !s.shape.customSvg), d.brushes, arrowDests, shapesEl);
    syncShapes(state, shapes.filter(s => s.shape.customSvg), d.brushes, arrowDests, customSvgsEl);
}
exports.renderSvg = renderSvg;
function syncDefs(d, shapes, defsEl) {
    const brushes = new Map();
    let brush;
    for (const s of shapes) {
        if (s.shape.dest) {
            brush = d.brushes[s.shape.brush];
            if (s.shape.modifiers)
                brush = makeCustomBrush(brush, s.shape.modifiers);
            brushes.set(brush.key, brush);
        }
    }
    const keysInDom = new Set();
    let el = defsEl.firstChild;
    while (el) {
        keysInDom.add(el.getAttribute('cgKey'));
        el = el.nextSibling;
    }
    for (const [key, brush] of brushes.entries()) {
        if (!keysInDom.has(key))
            defsEl.appendChild(renderMarker(brush));
    }
}
function syncShapes(state, shapes, brushes, arrowDests, root) {
    const bounds = state.dom.bounds(), hashesInDom = new Map(), toRemove = [];
    for (const sc of shapes)
        hashesInDom.set(sc.hash, false);
    let el = root.firstChild, elHash;
    while (el) {
        elHash = el.getAttribute('cgHash');
        if (hashesInDom.has(elHash))
            hashesInDom.set(elHash, true);
        else
            toRemove.push(el);
        el = el.nextSibling;
    }
    for (const el of toRemove)
        root.removeChild(el);
    for (const sc of shapes) {
        if (!hashesInDom.get(sc.hash))
            root.appendChild(renderShape(state, sc, brushes, arrowDests, bounds));
    }
}
function shapeHash({ orig, dest, brush, piece, modifiers, customSvg }, arrowDests, current, bounds) {
    return [
        bounds.width,
        bounds.height,
        current,
        orig,
        dest,
        brush,
        dest && (arrowDests.get(dest) || 0) > 1,
        piece && pieceHash(piece),
        modifiers && modifiersHash(modifiers),
        customSvg && customSvgHash(customSvg),
    ]
        .filter(x => x)
        .join(',');
}
function pieceHash(piece) {
    return [piece.playerIndex, piece.role, piece.scale].filter(x => x).join(',');
}
function modifiersHash(m) {
    return '' + (m.lineWidth || '');
}
function customSvgHash(s) {
    let h = 0;
    for (let i = 0; i < s.length; i++) {
        h = ((h << 5) - h + s.charCodeAt(i)) >>> 0;
    }
    return 'custom-' + h.toString();
}
function renderShape(state, { shape, current, hash }, brushes, arrowDests, bounds) {
    let el;
    if (shape.customSvg) {
        const orig = orient((0, util_1.key2pos)(shape.orig), state.orientation, state.dimensions);
        el = renderCustomSvg(shape.customSvg, orig, bounds, state.dimensions);
    }
    else if (shape.piece)
        el = renderPiece(state.drawable.pieces.baseUrl, orient((0, util_1.key2pos)(shape.orig), state.orientation, state.dimensions), shape.piece, bounds, state.dimensions, state.myPlayerIndex, state.variant);
    else {
        const orig = orient((0, util_1.key2pos)(shape.orig), state.orientation, state.dimensions);
        if (shape.orig && shape.dest) {
            let brush = brushes[shape.brush];
            if (shape.modifiers)
                brush = makeCustomBrush(brush, shape.modifiers);
            el = renderArrow(brush, orig, orient((0, util_1.key2pos)(shape.dest), state.orientation, state.dimensions), current, (arrowDests.get(shape.dest) || 0) > 1, bounds, state.dimensions);
        }
        else
            el = renderCircle(brushes[shape.brush], orig, current, bounds, state.dimensions);
    }
    el.setAttribute('cgHash', hash);
    return el;
}
function renderCustomSvg(customSvg, pos, bounds, bd) {
    const { width, height } = bounds;
    const w = width / bd.width;
    const h = height / bd.height;
    const x = (pos[0] - 1) * w;
    const y = (bd.height - pos[1]) * h;
    const g = setAttributes(createElement('g'), { transform: `translate(${x},${y})` });
    const svg = setAttributes(createElement('svg'), { width: w, height: h, viewBox: '0 0 100 100' });
    g.appendChild(svg);
    svg.innerHTML = customSvg;
    return g;
}
function renderCircle(brush, pos, current, bounds, bd) {
    const o = pos2px(pos, bounds, bd), widths = circleWidth(bounds, bd), radius = (bounds.width + bounds.height) / (2 * (bd.height + bd.width));
    return setAttributes(createElement('circle'), {
        stroke: brush.color,
        'stroke-width': widths[current ? 0 : 1],
        fill: 'none',
        opacity: opacity(brush, current),
        cx: o[0],
        cy: o[1],
        r: radius - widths[1] / 2,
    });
}
function renderArrow(brush, orig, dest, current, shorten, bounds, bd) {
    const m = arrowMargin(bounds, shorten && !current, bd), a = pos2px(orig, bounds, bd), b = pos2px(dest, bounds, bd), dx = b[0] - a[0], dy = b[1] - a[1], angle = Math.atan2(dy, dx), xo = Math.cos(angle) * m, yo = Math.sin(angle) * m;
    return setAttributes(createElement('line'), {
        stroke: brush.color,
        'stroke-width': lineWidth(brush, current, bounds, bd),
        'stroke-linecap': 'round',
        'marker-end': 'url(#arrowhead-' + brush.key + ')',
        opacity: opacity(brush, current),
        x1: a[0],
        y1: a[1],
        x2: b[0] - xo,
        y2: b[1] - yo,
    });
}
function renderPiece(baseUrl, pos, piece, bounds, bd, myPlayerIndex, variant) {
    const o = pos2px(pos, bounds, bd), width = (bounds.width / bd.width) * (piece.scale || 1), height = (bounds.height / bd.height) * (piece.scale || 1), name = roleToSvgName(variant, piece);
    const href = baseUrl.endsWith('/') ? baseUrl.slice('https://playstrategy.org'.length) + name + '.svg' : baseUrl;
    const side = piece.playerIndex === myPlayerIndex ? 'ally' : 'enemy';
    return setAttributes(createElement('image'), {
        className: `${piece.role} ${piece.playerIndex} ${side}`,
        x: o[0] - width / 2,
        y: o[1] - height / 2,
        width: width,
        height: height,
        href: href,
    });
}
function renderMarker(brush) {
    const marker = setAttributes(createElement('marker'), {
        id: 'arrowhead-' + brush.key,
        orient: 'auto',
        markerWidth: 4,
        markerHeight: 8,
        refX: 2.05,
        refY: 2.01,
    });
    marker.appendChild(setAttributes(createElement('path'), {
        d: 'M0,0 V4 L3,2 Z',
        fill: brush.color,
    }));
    marker.setAttribute('cgKey', brush.key);
    return marker;
}
function setAttributes(el, attrs) {
    for (const key in attrs)
        el.setAttribute(key, attrs[key]);
    return el;
}
exports.setAttributes = setAttributes;
function orient(pos, orientation, bd) {
    return T.mapToP1Inverse[orientation](pos, bd);
}
function makeCustomBrush(base, modifiers) {
    return {
        color: base.color,
        opacity: Math.round(base.opacity * 10) / 10,
        lineWidth: Math.round(modifiers.lineWidth || base.lineWidth),
        key: [base.key, modifiers.lineWidth].filter(x => x).join(''),
    };
}
function circleWidth(bounds, bd) {
    const base = bounds.width / (bd.width * 64);
    return [3 * base, 4 * base];
}
function lineWidth(brush, current, bounds, bd) {
    return (((brush.lineWidth || 10) * (current ? 0.85 : 1)) / (bd.width * 64)) * bounds.width;
}
function opacity(brush, current) {
    return (brush.opacity || 1) * (current ? 0.9 : 1);
}
function arrowMargin(bounds, shorten, bd) {
    return ((shorten ? 20 : 10) / (bd.width * 64)) * bounds.width;
}
function pos2px(pos, bounds, bd) {
    return [((pos[0] - 0.5) * bounds.width) / bd.width, ((bd.height + 0.5 - pos[1]) * bounds.height) / bd.height];
}
function roleToSvgName(variant, piece) {
    switch (variant) {
        case 'shogi':
            switch (piece.role) {
                case 'pp-piece':
                    return '0' + 'TO';
                case 'pl-piece':
                    return '0' + 'NY';
                case 'pn-piece':
                    return '0' + 'NK';
                case 'ps-piece':
                    return '0' + 'NG';
                case 'pr-piece':
                    return '0' + 'RY';
                case 'pb-piece':
                    return '0' + 'UM';
                case 'p-piece':
                    return '0FU';
                case 'l-piece':
                    return '0KY';
                case 'n-piece':
                    return '0KE';
                case 's-piece':
                    return '0GI';
                case 'r-piece':
                    return '0HI';
                case 'b-piece':
                    return '0KA';
                case 'g-piece':
                    return '0KI';
                case 'k-piece':
                    return piece.playerIndex === 'p1' ? '0GY' : '0OU';
                default:
                    return '';
            }
        case 'xiangqi':
            return (piece.playerIndex === 'p1' ? 'R' : 'B') + piece.role[0].toUpperCase();
        case 'flipello':
        case 'linesOfAction':
            return (piece.playerIndex === 'p1' ? 'b' : 'w') + piece.role[0].toUpperCase();
        case 'oware': {
            const asciiNum = piece.role[0].charCodeAt(0);
            return asciiNum > 90 ? (asciiNum - 70).toString() : (asciiNum - 64).toString();
        }
        default:
            return (piece.playerIndex === 'p1' ? 'w' : 'b') + piece.role[0].toUpperCase();
    }
}

},{"./transformations":18,"./util":20}],18:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.translateBase = exports.mapToP1Inverse = exports.mapToP1 = void 0;
exports.mapToP1 = {
    p1: (pos, _) => pos,
    p2: (pos, bt) => [bt.width + 1 - pos[0], bt.height + 1 - pos[1]],
    right: (pos, bt) => [bt.height + 1 - pos[1], pos[0]],
    left: (pos, bt) => [pos[1], bt.width + 1 - pos[0]],
};
exports.mapToP1Inverse = {
    p1: (pos, _) => pos,
    p2: (pos, bt) => [bt.width + 1 - pos[0], bt.height + 1 - pos[1]],
    right: (pos, bt) => [pos[1], bt.width + 1 - pos[0]],
    left: (pos, bt) => [bt.width + 1 - pos[0], pos[1]],
};
exports.translateBase = {
    p1: (pos, xScale, yScale, bt) => [
        (pos[0] - 1) * xScale,
        (bt.height - pos[1]) * yScale,
    ],
    p2: (pos, xScale, yScale, bt) => [
        (bt.width - pos[0]) * xScale,
        (pos[1] - 1) * yScale,
    ],
    right: (pos, xScale, yScale, _) => [(pos[1] - 1) * xScale, (pos[0] - 1) * yScale],
    left: (pos, xScale, yScale, bt) => [
        (bt.width - pos[0]) * xScale,
        (pos[1] - 1) * yScale,
    ],
};

},{}],19:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.xiangqiVariants = exports.shogiVariants = exports.letters = exports.ranks10 = exports.ranks = exports.files = exports.playerIndexs = exports.orientations = void 0;
exports.orientations = ['p1', 'p2', 'left', 'right'];
exports.playerIndexs = ['p1', 'p2'];
exports.files = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'];
exports.ranks = ['1', '2', '3', '4', '5', '6', '7', '8', '9', ':'];
exports.ranks10 = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'];
exports.letters = [
    'a',
    'b',
    'c',
    'd',
    'e',
    'f',
    'g',
    'h',
    'i',
    'j',
    'k',
    'l',
    'm',
    'n',
    'o',
    'p',
    'q',
    'r',
    's',
    't',
    'u',
    'v',
    'w',
    'x',
    'y',
    'z',
    'A',
    'B',
    'C',
    'D',
    'E',
    'F',
    'G',
    'H',
    'I',
    'J',
    'K',
    'L',
    'M',
    'N',
    'O',
    'P',
    'Q',
    'R',
    'S',
    'T',
    'U',
    'V',
    'W',
    'X',
    'Y',
    'Z',
];
exports.shogiVariants = ['shogi', 'minishogi', 'kyotoshogi', 'dobutsu', 'gorogoro', 'torishogi'];
exports.xiangqiVariants = ['xiangqi', 'minixiangqi', 'manchu', 'janggi'];

},{}],20:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.callUserFunction = exports.computeSquareCenter = exports.createEl = exports.isRightButton = exports.eventPosition = exports.setVisible = exports.translateRel = exports.translateAbs = exports.posToTranslateRel = exports.posToTranslateAbs = exports.samePiece = exports.distanceSq = exports.containsX = exports.isPlayerIndex = exports.orientationForLOA = exports.oppositeOrientationForLOA = exports.oppositeOrientation = exports.opposite = exports.timer = exports.memo = exports.allPos = exports.key2pos = exports.pos2key = exports.allKeys = exports.invNRanks = exports.NRanks = exports.invRanks = exports.playerIndexs = void 0;
const cg = require("./types");
const T = require("./transformations");
exports.playerIndexs = ['p1', 'p2'];
exports.invRanks = [...cg.ranks10].reverse();
exports.NRanks = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
exports.invNRanks = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1];
function files(n) {
    return cg.files.slice(0, n);
}
function ranks(n) {
    return cg.ranks10.slice(0, n);
}
function allKeys(bd = { width: 8, height: 8 }) {
    return Array.prototype.concat(...files(bd.width).map(c => ranks(bd.height).map(r => c + r)));
}
exports.allKeys = allKeys;
function pos2key(pos) {
    return (cg.files[pos[0] - 1] + cg.ranks10[pos[1] - 1]);
}
exports.pos2key = pos2key;
function key2pos(k) {
    return [k.charCodeAt(0) - 96, parseInt(k.slice(1))];
}
exports.key2pos = key2pos;
const allPos = (bd) => allKeys(bd).map(key2pos);
exports.allPos = allPos;
function memo(f) {
    let v;
    const ret = () => {
        if (v === undefined)
            v = f();
        return v;
    };
    ret.clear = () => {
        v = undefined;
    };
    return ret;
}
exports.memo = memo;
const timer = () => {
    let startAt;
    return {
        start() {
            startAt = performance.now();
        },
        cancel() {
            startAt = undefined;
        },
        stop() {
            if (!startAt)
                return 0;
            const time = performance.now() - startAt;
            startAt = undefined;
            return time;
        },
    };
};
exports.timer = timer;
const opposite = (c) => (c === 'p1' ? 'p2' : 'p1');
exports.opposite = opposite;
const flipOrientationLookup = {
    p1: 'p2',
    p2: 'p1',
    left: 'right',
    right: 'left',
};
const oppositeOrientation = (c) => flipOrientationLookup[c];
exports.oppositeOrientation = oppositeOrientation;
const flipOrientationLookupForLOA = {
    p1: 'right',
    p2: 'p1',
};
const oppositeOrientationForLOA = (c) => flipOrientationLookupForLOA[c];
exports.oppositeOrientationForLOA = oppositeOrientationForLOA;
const orientationLookupForLOA = {
    p1: 'p1',
    p2: 'right',
};
const orientationForLOA = (c) => orientationLookupForLOA[c];
exports.orientationForLOA = orientationForLOA;
const isPlayerIndex = (c) => c === 'p1' || c === 'p2';
exports.isPlayerIndex = isPlayerIndex;
function containsX(xs, x) {
    return xs !== undefined && xs.indexOf(x) !== -1;
}
exports.containsX = containsX;
const distanceSq = (pos1, pos2) => {
    const dx = pos1[0] - pos2[0], dy = pos1[1] - pos2[1];
    return dx * dx + dy * dy;
};
exports.distanceSq = distanceSq;
const samePiece = (player1, player2) => {
    return player1.role === player2.role && player1.playerIndex === player2.playerIndex;
};
exports.samePiece = samePiece;
const posToTranslateBase = (pos, orientation, xFactor, yFactor, bt) => {
    return T.translateBase[orientation](pos, xFactor, yFactor, bt);
};
const posToTranslateAbs = (bounds, bt) => {
    const xFactor = bounds.width / bt.width, yFactor = bounds.height / bt.height;
    return (pos, orientation) => posToTranslateBase(pos, orientation, xFactor, yFactor, bt);
};
exports.posToTranslateAbs = posToTranslateAbs;
const posToTranslateRel = (pos, orientation, bt) => posToTranslateBase(pos, orientation, 100, 100, bt);
exports.posToTranslateRel = posToTranslateRel;
const translateAbs = (el, pos) => {
    el.style.transform = `translate(${pos[0]}px,${pos[1]}px)`;
};
exports.translateAbs = translateAbs;
const translateRel = (el, percents) => {
    el.style.transform = `translate(${percents[0]}%,${percents[1]}%)`;
};
exports.translateRel = translateRel;
const setVisible = (el, v) => {
    el.style.visibility = v ? 'visible' : 'hidden';
};
exports.setVisible = setVisible;
const eventPosition = (e) => {
    var _a;
    if (e.clientX || e.clientX === 0)
        return [e.clientX, e.clientY];
    if ((_a = e.targetTouches) === null || _a === void 0 ? void 0 : _a[0])
        return [e.targetTouches[0].clientX, e.targetTouches[0].clientY];
    return;
};
exports.eventPosition = eventPosition;
const isRightButton = (e) => e.buttons === 2 || e.button === 2;
exports.isRightButton = isRightButton;
const createEl = (tagName, className) => {
    const el = document.createElement(tagName);
    if (className)
        el.className = className;
    return el;
};
exports.createEl = createEl;
function computeSquareCenter(key, orientation, bounds, bd) {
    const pos = T.mapToP1Inverse[orientation](key2pos(key), bd);
    return [
        bounds.left + (bounds.width * (pos[0] - 1 + 0.5)) / bd.width,
        bounds.top + (bounds.height * (bd.height - (pos[1] - 1 + 0.5))) / bd.height,
    ];
}
exports.computeSquareCenter = computeSquareCenter;
function callUserFunction(f, ...args) {
    if (f)
        setTimeout(() => f(...args), 1);
}
exports.callUserFunction = callUserFunction;

},{"./transformations":18,"./types":19}],21:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.renderWrap = void 0;
const util_1 = require("./util");
const types_1 = require("./types");
const svg_1 = require("./svg");
function renderWrap(element, s, relative) {
    element.innerHTML = '';
    element.classList.add('cg-wrap');
    for (const c of types_1.orientations)
        element.classList.toggle('orientation-' + c, s.orientation === c);
    element.classList.toggle('manipulable', !s.viewOnly);
    const helper = (0, util_1.createEl)('cg-helper');
    element.appendChild(helper);
    const container = (0, util_1.createEl)('cg-container');
    helper.appendChild(container);
    const extension = (0, util_1.createEl)('extension');
    container.appendChild(extension);
    const board = (0, util_1.createEl)('cg-board');
    container.appendChild(board);
    let svg;
    let customSvg;
    if (s.drawable.visible && !relative) {
        svg = (0, svg_1.setAttributes)((0, svg_1.createElement)('svg'), { class: 'cg-shapes' });
        svg.appendChild((0, svg_1.createElement)('defs'));
        svg.appendChild((0, svg_1.createElement)('g'));
        customSvg = (0, svg_1.setAttributes)((0, svg_1.createElement)('svg'), { class: 'cg-custom-svgs' });
        customSvg.appendChild((0, svg_1.createElement)('g'));
        container.appendChild(svg);
        container.appendChild(customSvg);
    }
    if (s.coordinates) {
        const orientClass = ' ' + s.orientation;
        const shogi = types_1.shogiVariants.includes(s.variant);
        const xiangqi = types_1.xiangqiVariants.includes(s.variant);
        if (shogi) {
            container.appendChild(renderCoords(types_1.ranks.slice(0, s.dimensions.height).reverse(), 'files' + orientClass));
            container.appendChild(renderCoords(types_1.ranks.slice(0, s.dimensions.width).reverse(), 'ranks' + orientClass));
        }
        else if (s.notation === 6) {
            container.appendChild(renderCoords(['0'].concat(types_1.ranks.slice(0, 9).reverse()), 'ranks' + orientClass));
            container.appendChild(renderCoords(types_1.ranks.slice(0, 9), 'files' + orientClass));
        }
        else if (xiangqi) {
            if (s.orientation === 'p1') {
                container.appendChild(renderCoords(types_1.ranks10.slice(0, s.dimensions.width).reverse(), 'files' + ' p1'));
                container.appendChild(renderCoords(types_1.ranks10.slice(0, s.dimensions.width).reverse(), 'files' + ' p2'));
            }
            else {
                container.appendChild(renderCoords(types_1.ranks10.slice(0, s.dimensions.width), 'files' + ' p1'));
                container.appendChild(renderCoords(types_1.ranks10.slice(0, s.dimensions.width), 'files' + ' p2'));
            }
        }
        else if (s.variant === 'flipello') {
            container.appendChild(renderCoords(types_1.ranks10.slice(0, s.dimensions.height).reverse(), 'ranks' + orientClass));
            container.appendChild(renderCoords(types_1.files.slice(0, s.dimensions.width), 'files' + orientClass));
        }
        else if (s.variant === 'oware') {
            if (s.orientation === 'p1') {
                container.appendChild(renderCoords(types_1.files.slice(0, s.dimensions.width).map(x => x.toUpperCase()), 'files' + ' p1'));
                container.appendChild(renderCoords(types_1.files.slice(0, s.dimensions.width), 'files' + ' p2'));
            }
            else {
                container.appendChild(renderCoords(types_1.files
                    .slice(0, s.dimensions.width)
                    .map(x => x.toUpperCase())
                    .reverse(), 'files' + ' p1'));
                container.appendChild(renderCoords(types_1.files.slice(0, s.dimensions.width).reverse(), 'files' + ' p2'));
            }
        }
        else {
            container.appendChild(renderCoords(types_1.ranks10.slice(0, s.dimensions.height), 'ranks' + orientClass));
            container.appendChild(renderCoords(types_1.files.slice(0, s.dimensions.width), 'files' + orientClass));
        }
    }
    let ghost;
    if (s.draggable.showGhost && !relative) {
        ghost = (0, util_1.createEl)('piece', 'ghost');
        (0, util_1.setVisible)(ghost, false);
        container.appendChild(ghost);
    }
    return {
        board,
        container,
        ghost,
        svg,
        customSvg,
    };
}
exports.renderWrap = renderWrap;
function renderCoords(elems, className) {
    const el = (0, util_1.createEl)('coords', className);
    let f;
    for (const elem of elems) {
        f = (0, util_1.createEl)('coord');
        f.textContent = elem;
        el.appendChild(f);
    }
    return el;
}

},{"./svg":17,"./types":19,"./util":20}]},{},[12])(12)
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
